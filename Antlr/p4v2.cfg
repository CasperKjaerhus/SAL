grammar p4v2;
s 					:	Importstmts InitStmts ;
Importstmts 		:	Importstmt Importstmts
					|	;
InitStmts 			:	Dcl InitStmts
					|	;
Importstmt 			:	'include' Id;
Dcl 				:	FuncDcl
					|	VarDcl;
VarDcl 				:	Type Id
					| 	Type Id Modifier
					|	Type Id Assignment Expr
					|	Type Id Modifier Assignment Expr;
Modifier 			:	Lbracket Size Rbracket
					|	Lbracket Rbracket;
FuncDcl 			:	Function Id Lparen Params Rparen Returns Type Body
					|	Function Id Lparen Rparen Returns Type Body;
Params 				:	Param
					|	Param ',' Params;
Param 				:	Type Id;
Type 				:	'number'
					|	'string'
					|	'char'
					|	'bool'
					| 	'void';
Body 				:	Begin Stmts End;
Stmts 				:	VarDcl Stmts							// Hvad med funcdcl inde i en funcdcl?
					|	ControlExpr Stmts
					|	Functioncall Stmts
					|	ReturnExpr Stmts
					|	;
Expr 				: 	RelExpr (BoolOp RelExpr)*;				// Hvad med negation?
RelExpr 			:	AddExpr (RelOp AddExpr)*;
AddExpr				: 	MulExpr (AddOp MulExpr)*;
MulExpr				: 	Term (MulOp Term)*;
Term				: 	Val | Lparen Expr Rparen;
Val					: 	Id | Num | Functioncall;
ControlExpr			:	IfExpr
					|	ForExpr
					|	WhileExpr
					|	ForeachExpr
					|	SwitchExpr;
IfExpr 				:	If Lparen Expr Rparen Then Body ElseExpr;
ElseExpr 			:	Else Body
					|	Else IfExpr
					|	;
ForExpr 			:	For Lparen Id Colon Expr Dotdotdot Expr Rparen Body
					|	For Lparen Id Colon Expr Dotdotdot Expr Comma Step Expr Rparen Body;
WhileExpr 			:	While Lparen Expr Rparen Body;
ForeachExpr			:	Foreach Lparen Id In Id Rparen Body;
SwitchExpr 			:	Switch Lparen Id Rparen Switchbody;
Switchbody 			:	Begin Cases End;
Cases 				:	Case
					|	Case Cases;
Case 				:	CaseKeyword Val Colon 					// Hvad med blokke/scope/Begin-end?
					|	CaseKeyword Val Colon Break
					|	CaseKeyword Val Colon Body
					|	CaseKeyword Val Colon Body Break;
Functioncall		:	Id Lparen Arguments Rparen 
					| 	Id Lparen Rparen;
Arguments 			:	Val | Val ',' Arguments;
ReturnExpr 			:	Return Expr;

//Regex
Size				:	[1-9]+ Digit*;
Id 					:	[a-zA-Z]+[a-zA-Z0-9_]*;
Num 				:	Integers
					|	Decimal;
Integers			:	'0'
					|	[1-9]+ Digit*; 
Decimal				:	Integers '.' Digit*;
fragment Digit		:	[0-9];

//Terminals
RelOp 				:	'<'
					|	'>'
					|	'=='
					|	'!='
					|	'<='
					|	'>=';
BoolOp 				:	'&&'
					|	'||';
AddOp 				:	'+'
					|	'-';
MulOp 				:	'*'
					|	'/'
					|	'%';
Assignment 			:	'=';
Function 			:	'function';
Lbracket 			:	'[';
Rbracket 			:	']';
Lparen 				:	'(';
Rparen 				:	')';
Return 				:	'return';
Returns 			:	'returns';
Comma 				:	',';
Begin 				:	'begin';
End 				:	'end';
If 					:	'if';
Else 				:	'else';
Then 				:	'then';
For 				:	'for';
While 				:	'while';
Colon 				:	':';
Dotdotdot 			:	'...';
Step 				:	'step';
Foreach 			:	'foreach';
In 					:	'in';
Switch 				:	'switch';
CaseKeyword 		:	'case';
Break 				:	'break';

LineComment			:	'/''/' ~[\r\n]* -> skip;
MultiComment		:	'/''*' .*? '*''/' -> skip;
//Skips
WS  				: [ \t\r\n]+ -> skip;
