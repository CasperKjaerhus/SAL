//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from p4.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class p4Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Modifier=1, Negation=2, AndOp=3, OrOp=4, RelOp=5, UnaryOp=6, UnIncreDecre=7, 
		CompoundStmt=8, AddOp=9, MulOp=10, Assignment=11, Function=12, Include=13, 
		Lbracket=14, Rbracket=15, Lparen=16, Rparen=17, LBrace=18, RBrace=19, 
		Return=20, Returns=21, Comma=22, Begin=23, End=24, If=25, Else=26, Then=27, 
		For=28, While=29, Colon=30, Dotdotdot=31, Step=32, Foreach=33, In=34, 
		Switch=35, CaseKeyword=36, Break=37, Dot=38, Semicolon=39, Type=40, String=41, 
		Char=42, Bool=43, Id=44, Decimal=45, Integer=46, LineComment=47, MultiComment=48, 
		WS=49;
	public const int
		RULE_s = 0, RULE_importStmt = 1, RULE_initStmt = 2, RULE_varDcl = 3, RULE_assignment = 4, 
		RULE_list = 5, RULE_funcDcl = 6, RULE_params = 7, RULE_param = 8, RULE_body = 9, 
		RULE_stmt = 10, RULE_controlStructure = 11, RULE_ifStmt = 12, RULE_elseStmt = 13, 
		RULE_forExpr = 14, RULE_whileExpr = 15, RULE_foreachExpr = 16, RULE_switchStmt = 17, 
		RULE_switchBody = 18, RULE_switchItem = 19, RULE_expr = 20, RULE_relExpr = 21, 
		RULE_boolExpr = 22, RULE_andExpr = 23, RULE_boolTerm = 24, RULE_mathExpr = 25, 
		RULE_mulExpr = 26, RULE_mathTerm = 27, RULE_val = 28, RULE_indexVal = 29, 
		RULE_literal = 30, RULE_functioncall = 31, RULE_argument = 32, RULE_returnStmt = 33;
	public static readonly string[] ruleNames = {
		"s", "importStmt", "initStmt", "varDcl", "assignment", "list", "funcDcl", 
		"params", "param", "body", "stmt", "controlStructure", "ifStmt", "elseStmt", 
		"forExpr", "whileExpr", "foreachExpr", "switchStmt", "switchBody", "switchItem", 
		"expr", "relExpr", "boolExpr", "andExpr", "boolTerm", "mathExpr", "mulExpr", 
		"mathTerm", "val", "indexVal", "literal", "functioncall", "argument", 
		"returnStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'!'", "'&&'", "'||'", null, null, null, null, null, null, 
		"'='", "'function'", "'include'", "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'return'", "'returns'", "','", "'begin'", "'end'", "'if'", "'else'", 
		"'then'", "'for'", "'while'", "':'", "'...'", "'step'", "'foreach'", "'in'", 
		"'switch'", "'case'", "'break'", "'.'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Modifier", "Negation", "AndOp", "OrOp", "RelOp", "UnaryOp", "UnIncreDecre", 
		"CompoundStmt", "AddOp", "MulOp", "Assignment", "Function", "Include", 
		"Lbracket", "Rbracket", "Lparen", "Rparen", "LBrace", "RBrace", "Return", 
		"Returns", "Comma", "Begin", "End", "If", "Else", "Then", "For", "While", 
		"Colon", "Dotdotdot", "Step", "Foreach", "In", "Switch", "CaseKeyword", 
		"Break", "Dot", "Semicolon", "Type", "String", "Char", "Bool", "Id", "Decimal", 
		"Integer", "LineComment", "MultiComment", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "p4.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static p4Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public p4Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public p4Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext[] importStmt() {
			return GetRuleContexts<ImportStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext importStmt(int i) {
			return GetRuleContext<ImportStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitStmtContext[] initStmt() {
			return GetRuleContexts<InitStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitStmtContext initStmt(int i) {
			return GetRuleContext<InitStmtContext>(i);
		}
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitS(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 0, RULE_s);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Include) {
				{
				{
				State = 68;
				importStmt();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Function || _la==Type) {
				{
				{
				State = 74;
				initStmt();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(p4Parser.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		public ImportStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterImportStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitImportStmt(this);
		}
	}

	[RuleVersion(0)]
	public ImportStmtContext importStmt() {
		ImportStmtContext _localctx = new ImportStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(Include);
			State = 81;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		public InitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterInitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitInitStmt(this);
		}
	}

	[RuleVersion(0)]
	public InitStmtContext initStmt() {
		InitStmtContext _localctx = new InitStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_initStmt);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				varDcl();
				}
				break;
			case Function:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				funcDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(p4Parser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modifier() { return GetToken(p4Parser.Modifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(p4Parser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDcl);
		int _la;
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				Match(Type);
				State = 88;
				Match(Id);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Modifier) {
					{
					State = 89;
					Match(Modifier);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				Match(Type);
				State = 93;
				Match(Id);
				State = 94;
				Match(Assignment);
				State = 95;
				expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96;
				Match(Type);
				State = 97;
				Match(Id);
				State = 98;
				Match(Modifier);
				State = 99;
				Match(Assignment);
				State = 100;
				list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(p4Parser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(Id);
			State = 104;
			Match(Assignment);
			State = 105;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(p4Parser.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(p4Parser.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 10, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(LBrace);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnIncreDecre) | (1L << String) | (1L << Char) | (1L << Bool) | (1L << Id) | (1L << Decimal) | (1L << Integer))) != 0)) {
				{
				State = 108;
				val();
				}
			}

			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 111;
				Match(Comma);
				State = 112;
				val();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(p4Parser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Returns() { return GetToken(p4Parser.Returns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(p4Parser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitFuncDcl(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcDcl);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				Match(Function);
				State = 121;
				Match(Id);
				State = 122;
				Match(Lparen);
				State = 123;
				@params();
				State = 124;
				Match(Rparen);
				State = 125;
				Match(Returns);
				State = 126;
				Match(Type);
				State = 127;
				body();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(Function);
				State = 130;
				Match(Id);
				State = 131;
				Match(Lparen);
				State = 132;
				Match(Rparen);
				State = 133;
				Match(Returns);
				State = 134;
				Match(Type);
				State = 135;
				body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 14, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Type) {
				{
				State = 138;
				param();
				}
			}

			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 141;
				Match(Comma);
				State = 142;
				param();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(p4Parser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 16, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(Type);
			State = 149;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(p4Parser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(p4Parser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(Begin);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Return) | (1L << If) | (1L << For) | (1L << While) | (1L << Foreach) | (1L << Switch) | (1L << Type) | (1L << Id))) != 0)) {
				{
				{
				State = 152;
				stmt();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(p4Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureContext controlStructure() {
			return GetRuleContext<ControlStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(p4Parser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_stmt);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				varDcl();
				State = 161;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				assignment();
				State = 164;
				Match(Semicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166;
				controlStructure();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167;
				functioncall();
				State = 168;
				Match(Semicolon);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 170;
				Match(Return);
				State = 171;
				returnStmt();
				State = 172;
				Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForExprContext forExpr() {
			return GetRuleContext<ForExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachExprContext foreachExpr() {
			return GetRuleContext<ForeachExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileExprContext whileExpr() {
			return GetRuleContext<WhileExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		public ControlStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterControlStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitControlStructure(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructureContext controlStructure() {
		ControlStructureContext _localctx = new ControlStructureContext(Context, State);
		EnterRule(_localctx, 22, RULE_controlStructure);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				ifStmt();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				forExpr();
				}
				break;
			case Foreach:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178;
				foreachExpr();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				whileExpr();
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				switchStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(p4Parser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(p4Parser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(If);
			State = 184;
			Match(Lparen);
			State = 185;
			expr();
			State = 186;
			Match(Rparen);
			State = 187;
			Match(Then);
			State = 188;
			body();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 189;
				elseStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(p4Parser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_elseStmt);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(Else);
				State = 193;
				body();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(Else);
				State = 195;
				ifStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(p4Parser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(p4Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dotdotdot() { return GetToken(p4Parser.Dotdotdot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(p4Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Step() { return GetToken(p4Parser.Step, 0); }
		public ForExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterForExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitForExpr(this);
		}
	}

	[RuleVersion(0)]
	public ForExprContext forExpr() {
		ForExprContext _localctx = new ForExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_forExpr);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				Match(For);
				State = 199;
				Match(Lparen);
				State = 200;
				Match(Id);
				State = 201;
				Match(Colon);
				State = 202;
				expr();
				State = 203;
				Match(Dotdotdot);
				State = 204;
				expr();
				State = 205;
				Match(Rparen);
				State = 206;
				body();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				Match(For);
				State = 209;
				Match(Lparen);
				State = 210;
				Match(Id);
				State = 211;
				Match(Colon);
				State = 212;
				expr();
				State = 213;
				Match(Dotdotdot);
				State = 214;
				expr();
				State = 215;
				Match(Comma);
				State = 216;
				Match(Step);
				State = 217;
				expr();
				State = 218;
				Match(Rparen);
				State = 219;
				body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(p4Parser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public WhileExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterWhileExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitWhileExpr(this);
		}
	}

	[RuleVersion(0)]
	public WhileExprContext whileExpr() {
		WhileExprContext _localctx = new WhileExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_whileExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(While);
			State = 224;
			Match(Lparen);
			State = 225;
			expr();
			State = 226;
			Match(Rparen);
			State = 227;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Foreach() { return GetToken(p4Parser.Foreach, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(p4Parser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(p4Parser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(p4Parser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ForeachExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterForeachExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitForeachExpr(this);
		}
	}

	[RuleVersion(0)]
	public ForeachExprContext foreachExpr() {
		ForeachExprContext _localctx = new ForeachExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_foreachExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(Foreach);
			State = 230;
			Match(Lparen);
			State = 231;
			Match(Id);
			State = 232;
			Match(In);
			State = 233;
			Match(Id);
			State = 234;
			Match(Rparen);
			State = 235;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(p4Parser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBodyContext switchBody() {
			return GetRuleContext<SwitchBodyContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_switchStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(Switch);
			State = 238;
			Match(Lparen);
			State = 239;
			Match(Id);
			State = 240;
			Match(Rparen);
			State = 241;
			switchBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(p4Parser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(p4Parser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchItemContext[] switchItem() {
			return GetRuleContexts<SwitchItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchItemContext switchItem(int i) {
			return GetRuleContext<SwitchItemContext>(i);
		}
		public SwitchBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchBody(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBodyContext switchBody() {
		SwitchBodyContext _localctx = new SwitchBodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_switchBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(Begin);
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CaseKeyword) {
				{
				{
				State = 244;
				switchItem();
				}
				}
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 250;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CaseKeyword() { return GetToken(p4Parser.CaseKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(p4Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(p4Parser.Break, 0); }
		public SwitchItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchItem(this);
		}
	}

	[RuleVersion(0)]
	public SwitchItemContext switchItem() {
		SwitchItemContext _localctx = new SwitchItemContext(Context, State);
		EnterRule(_localctx, 38, RULE_switchItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(CaseKeyword);
			State = 253;
			val();
			State = 254;
			Match(Colon);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Begin) {
				{
				State = 255;
				body();
				}
			}

			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Break) {
				{
				State = 258;
				Match(Break);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelExprContext relExpr() {
			return GetRuleContext<RelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Negation() { return GetToken(p4Parser.Negation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_expr);
		int _la;
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Negation) {
					{
					State = 261;
					Match(Negation);
					}
				}

				State = 264;
				relExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Negation) {
					{
					State = 265;
					Match(Negation);
					}
				}

				State = 268;
				boolExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathExprContext[] mathExpr() {
			return GetRuleContexts<MathExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathExprContext mathExpr(int i) {
			return GetRuleContext<MathExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RelOp() { return GetTokens(p4Parser.RelOp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RelOp(int i) {
			return GetToken(p4Parser.RelOp, i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			mathExpr();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RelOp) {
				{
				{
				State = 272;
				Match(RelOp);
				State = 273;
				mathExpr();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOp() { return GetTokens(p4Parser.OrOp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOp(int i) {
			return GetToken(p4Parser.OrOp, i);
		}
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		BoolExprContext _localctx = new BoolExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_boolExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			andExpr();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OrOp) {
				{
				{
				State = 280;
				Match(OrOp);
				State = 281;
				andExpr();
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolTermContext[] boolTerm() {
			return GetRuleContexts<BoolTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTermContext boolTerm(int i) {
			return GetRuleContext<BoolTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndOp() { return GetTokens(p4Parser.AndOp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndOp(int i) {
			return GetToken(p4Parser.AndOp, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			boolTerm();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndOp) {
				{
				{
				State = 288;
				Match(AndOp);
				State = 289;
				boolTerm();
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(p4Parser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		public BoolTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterBoolTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitBoolTerm(this);
		}
	}

	[RuleVersion(0)]
	public BoolTermContext boolTerm() {
		BoolTermContext _localctx = new BoolTermContext(Context, State);
		EnterRule(_localctx, 48, RULE_boolTerm);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295;
				Match(Id);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296;
				Match(Bool);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297;
				functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 298;
				Match(Lparen);
				State = 299;
				expr();
				State = 300;
				Match(Rparen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AddOp() { return GetTokens(p4Parser.AddOp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AddOp(int i) {
			return GetToken(p4Parser.AddOp, i);
		}
		public MathExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterMathExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitMathExpr(this);
		}
	}

	[RuleVersion(0)]
	public MathExprContext mathExpr() {
		MathExprContext _localctx = new MathExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_mathExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			mulExpr();
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AddOp) {
				{
				{
				State = 305;
				Match(AddOp);
				State = 306;
				mulExpr();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathTermContext[] mathTerm() {
			return GetRuleContexts<MathTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathTermContext mathTerm(int i) {
			return GetRuleContext<MathTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MulOp() { return GetTokens(p4Parser.MulOp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MulOp(int i) {
			return GetToken(p4Parser.MulOp, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterMulExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitMulExpr(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_mulExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			mathTerm();
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MulOp) {
				{
				{
				State = 313;
				Match(MulOp);
				State = 314;
				mathTerm();
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelExprContext relExpr() {
			return GetRuleContext<RelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		public MathTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterMathTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitMathTerm(this);
		}
	}

	[RuleVersion(0)]
	public MathTermContext mathTerm() {
		MathTermContext _localctx = new MathTermContext(Context, State);
		EnterRule(_localctx, 54, RULE_mathTerm);
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UnIncreDecre:
			case String:
			case Char:
			case Bool:
			case Id:
			case Decimal:
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				val();
				}
				break;
			case Lparen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				Match(Lparen);
				State = 322;
				relExpr();
				State = 323;
				Match(Rparen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(p4Parser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(p4Parser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UnIncreDecre() { return GetTokens(p4Parser.UnIncreDecre); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnIncreDecre(int i) {
			return GetToken(p4Parser.UnIncreDecre, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(p4Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbracket() { return GetToken(p4Parser.Lbracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexValContext indexVal() {
			return GetRuleContext<IndexValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbracket() { return GetToken(p4Parser.Rbracket, 0); }
		public ValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitVal(this);
		}
	}

	[RuleVersion(0)]
	public ValContext val() {
		ValContext _localctx = new ValContext(Context, State);
		EnterRule(_localctx, 56, RULE_val);
		int _la;
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UnIncreDecre) {
					{
					State = 327;
					Match(UnIncreDecre);
					}
				}

				State = 330;
				Match(Id);
				State = 332;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 331;
					Match(UnIncreDecre);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 336;
				Match(Id);
				State = 337;
				Match(Dot);
				State = 338;
				Match(Id);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 339;
				Match(Id);
				State = 340;
				Match(Lbracket);
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UnIncreDecre) {
					{
					State = 341;
					Match(UnIncreDecre);
					}
				}

				State = 344;
				indexVal();
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UnIncreDecre) {
					{
					State = 345;
					Match(UnIncreDecre);
					}
				}

				State = 348;
				Match(Rbracket);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 350;
				Match(Id);
				State = 351;
				Match(Dot);
				State = 352;
				functioncall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(p4Parser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(p4Parser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(p4Parser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(p4Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public IndexValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterIndexVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitIndexVal(this);
		}
	}

	[RuleVersion(0)]
	public IndexValContext indexVal() {
		IndexValContext _localctx = new IndexValContext(Context, State);
		EnterRule(_localctx, 58, RULE_indexVal);
		try {
			State = 361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				Match(Integer);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				Match(Id);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				Match(Id);
				State = 358;
				Match(Dot);
				State = 359;
				Match(Id);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 360;
				functioncall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(p4Parser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal() { return GetToken(p4Parser.Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(p4Parser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(p4Parser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(p4Parser.Bool, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << String) | (1L << Char) | (1L << Bool) | (1L << Decimal) | (1L << Integer))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(p4Parser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(p4Parser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(p4Parser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(p4Parser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 62, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(Id);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 366;
				Match(Dot);
				State = 367;
				Match(Id);
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 373;
			Match(Lparen);
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnIncreDecre) | (1L << String) | (1L << Char) | (1L << Bool) | (1L << Id) | (1L << Decimal) | (1L << Integer))) != 0)) {
				{
				{
				State = 374;
				argument();
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 380;
			Match(Rparen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 64, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			val();
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 383;
				Match(Comma);
				State = 384;
				val();
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_returnStmt);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				Match(Id);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				val();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x33', '\x18E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x3', '\x2', '\a', '\x2', 'H', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', 'K', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 'N', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', 'Q', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'X', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', ']', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'h', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'p', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', 't', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'w', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x8B', '\n', '\b', '\x3', 
		'\t', '\x5', '\t', '\x8E', '\n', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\x92', '\n', '\t', '\f', '\t', '\xE', '\t', '\x95', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x9C', '\n', '\v', '\f', '\v', '\xE', '\v', '\x9F', '\v', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\xB1', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xB8', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\xC1', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC7', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xE0', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xF8', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\xFB', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x103', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x106', '\n', '\x15', 
		'\x3', '\x16', '\x5', '\x16', '\x109', '\n', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x10D', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x110', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\x115', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x118', '\v', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x11D', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x120', '\v', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x125', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x128', '\v', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x131', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x136', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x139', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x13E', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x141', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x148', '\n', '\x1D', '\x3', '\x1E', '\x5', 
		'\x1E', '\x14B', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x14F', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x159', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x15D', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x164', '\n', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x16C', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\a', '!', '\x173', '\n', '!', '\f', '!', '\xE', 
		'!', '\x176', '\v', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x17A', '\n', 
		'!', '\f', '!', '\xE', '!', '\x17D', '\v', '!', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x184', '\n', '\"', 
		'\f', '\"', '\xE', '\"', '\x187', '\v', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x18C', '\n', '#', '\x3', '#', '\x2', '\x2', 
		'$', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x2', '\x3', '\x4', '\x2', '+', '-', '/', '\x30', '\x2', 
		'\x1A2', '\x2', 'I', '\x3', '\x2', '\x2', '\x2', '\x4', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\x6', 'W', '\x3', '\x2', '\x2', '\x2', '\b', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'i', '\x3', '\x2', '\x2', '\x2', '\f', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x12', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x99', '\x3', '\x2', '\x2', '\x2', '\x16', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xDF', '\x3', '\x2', '\x2', '\x2', ' ', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xEF', '\x3', '\x2', '\x2', '\x2', '&', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xFE', '\x3', '\x2', '\x2', '\x2', '*', '\x10F', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x111', '\x3', '\x2', '\x2', '\x2', '.', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x130', '\x3', '\x2', '\x2', '\x2', '\x34', '\x132', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x38', '\x147', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x16B', '\x3', '\x2', '\x2', '\x2', '>', '\x16D', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x42', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'H', '\x5', '\x4', '\x3', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x5', '\x6', '\x4', 
		'\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'P', '\x3', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\a', '\xF', '\x2', '\x2', 'S', 'T', '\a', '.', 
		'\x2', '\x2', 'T', '\x5', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x5', 
		'\b', '\x5', '\x2', 'V', 'X', '\x5', '\xE', '\b', '\x2', 'W', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '*', '\x2', '\x2', 'Z', '\\', 
		'\a', '.', '\x2', '\x2', '[', ']', '\a', '\x3', '\x2', '\x2', '\\', '[', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', 
		'h', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '*', '\x2', '\x2', '_', 
		'`', '\a', '.', '\x2', '\x2', '`', '\x61', '\a', '\r', '\x2', '\x2', '\x61', 
		'h', '\x5', '*', '\x16', '\x2', '\x62', '\x63', '\a', '*', '\x2', '\x2', 
		'\x63', '\x64', '\a', '.', '\x2', '\x2', '\x64', '\x65', '\a', '\x3', 
		'\x2', '\x2', '\x65', '\x66', '\a', '\r', '\x2', '\x2', '\x66', 'h', '\x5', 
		'\f', '\a', '\x2', 'g', 'Y', '\x3', '\x2', '\x2', '\x2', 'g', '^', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x62', '\x3', '\x2', '\x2', '\x2', 'h', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '.', '\x2', '\x2', 'j', 'k', 
		'\a', '\r', '\x2', '\x2', 'k', 'l', '\x5', '*', '\x16', '\x2', 'l', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'm', 'o', '\a', '\x14', '\x2', '\x2', 'n', 
		'p', '\x5', ':', '\x1E', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'u', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\a', '\x18', '\x2', '\x2', 'r', 't', '\x5', ':', '\x1E', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\x15', '\x2', '\x2', 'y', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\xE', '\x2', '\x2', '{', '|', '\a', '.', '\x2', 
		'\x2', '|', '}', '\a', '\x12', '\x2', '\x2', '}', '~', '\x5', '\x10', 
		'\t', '\x2', '~', '\x7F', '\a', '\x13', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\x17', '\x2', '\x2', '\x80', '\x81', '\a', '*', '\x2', '\x2', '\x81', 
		'\x82', '\x5', '\x14', '\v', '\x2', '\x82', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', '\xE', '\x2', '\x2', '\x84', '\x85', '\a', 
		'.', '\x2', '\x2', '\x85', '\x86', '\a', '\x12', '\x2', '\x2', '\x86', 
		'\x87', '\a', '\x13', '\x2', '\x2', '\x87', '\x88', '\a', '\x17', '\x2', 
		'\x2', '\x88', '\x89', '\a', '*', '\x2', '\x2', '\x89', '\x8B', '\x5', 
		'\x14', '\v', '\x2', '\x8A', 'z', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x8B', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8E', '\x5', '\x12', '\n', '\x2', '\x8D', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\x18', '\x2', 
		'\x2', '\x90', '\x92', '\x5', '\x12', '\n', '\x2', '\x91', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x11', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\a', '*', '\x2', '\x2', '\x97', 
		'\x98', '\a', '.', '\x2', '\x2', '\x98', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9D', '\a', '\x19', '\x2', '\x2', '\x9A', '\x9C', '\x5', 
		'\x16', '\f', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x1A', '\x2', '\x2', '\xA1', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\x5', '\b', '\x5', '\x2', '\xA3', '\xA4', '\a', 
		')', '\x2', '\x2', '\xA4', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x5', '\n', '\x6', '\x2', '\xA6', '\xA7', '\a', ')', '\x2', '\x2', 
		'\xA7', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xB1', '\x5', '\x18', 
		'\r', '\x2', '\xA9', '\xAA', '\x5', '@', '!', '\x2', '\xAA', '\xAB', '\a', 
		')', '\x2', '\x2', '\xAB', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\a', '\x16', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x44', '#', 
		'\x2', '\xAE', '\xAF', '\a', ')', '\x2', '\x2', '\xAF', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB8', '\x5', '\x1A', '\xE', '\x2', '\xB3', '\xB8', '\x5', '\x1E', '\x10', 
		'\x2', '\xB4', '\xB8', '\x5', '\"', '\x12', '\x2', '\xB5', '\xB8', '\x5', 
		' ', '\x11', '\x2', '\xB6', '\xB8', '\x5', '$', '\x13', '\x2', '\xB7', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x1B', '\x2', 
		'\x2', '\xBA', '\xBB', '\a', '\x12', '\x2', '\x2', '\xBB', '\xBC', '\x5', 
		'*', '\x16', '\x2', '\xBC', '\xBD', '\a', '\x13', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', '\x1D', '\x2', '\x2', '\xBE', '\xC0', '\x5', '\x14', '\v', 
		'\x2', '\xBF', '\xC1', '\x5', '\x1C', '\xF', '\x2', '\xC0', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x1C', '\x2', 
		'\x2', '\xC3', '\xC7', '\x5', '\x14', '\v', '\x2', '\xC4', '\xC5', '\a', 
		'\x1C', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x1A', '\xE', '\x2', '\xC6', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', 
		'\x1E', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x12', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '.', '\x2', '\x2', '\xCB', '\xCC', '\a', ' ', '\x2', '\x2', 
		'\xCC', '\xCD', '\x5', '*', '\x16', '\x2', '\xCD', '\xCE', '\a', '!', 
		'\x2', '\x2', '\xCE', '\xCF', '\x5', '*', '\x16', '\x2', '\xCF', '\xD0', 
		'\a', '\x13', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\x14', '\v', '\x2', 
		'\xD1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', '\x1E', 
		'\x2', '\x2', '\xD3', '\xD4', '\a', '\x12', '\x2', '\x2', '\xD4', '\xD5', 
		'\a', '.', '\x2', '\x2', '\xD5', '\xD6', '\a', ' ', '\x2', '\x2', '\xD6', 
		'\xD7', '\x5', '*', '\x16', '\x2', '\xD7', '\xD8', '\a', '!', '\x2', '\x2', 
		'\xD8', '\xD9', '\x5', '*', '\x16', '\x2', '\xD9', '\xDA', '\a', '\x18', 
		'\x2', '\x2', '\xDA', '\xDB', '\a', '\"', '\x2', '\x2', '\xDB', '\xDC', 
		'\x5', '*', '\x16', '\x2', '\xDC', '\xDD', '\a', '\x13', '\x2', '\x2', 
		'\xDD', '\xDE', '\x5', '\x14', '\v', '\x2', '\xDE', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE2', '\a', '\x1F', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x12', 
		'\x2', '\x2', '\xE3', '\xE4', '\x5', '*', '\x16', '\x2', '\xE4', '\xE5', 
		'\a', '\x13', '\x2', '\x2', '\xE5', '\xE6', '\x5', '\x14', '\v', '\x2', 
		'\xE6', '!', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', '#', '\x2', 
		'\x2', '\xE8', '\xE9', '\a', '\x12', '\x2', '\x2', '\xE9', '\xEA', '\a', 
		'.', '\x2', '\x2', '\xEA', '\xEB', '\a', '$', '\x2', '\x2', '\xEB', '\xEC', 
		'\a', '.', '\x2', '\x2', '\xEC', '\xED', '\a', '\x13', '\x2', '\x2', '\xED', 
		'\xEE', '\x5', '\x14', '\v', '\x2', '\xEE', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\a', '%', '\x2', '\x2', '\xF0', '\xF1', '\a', 
		'\x12', '\x2', '\x2', '\xF1', '\xF2', '\a', '.', '\x2', '\x2', '\xF2', 
		'\xF3', '\a', '\x13', '\x2', '\x2', '\xF3', '\xF4', '\x5', '&', '\x14', 
		'\x2', '\xF4', '%', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF9', '\a', 
		'\x19', '\x2', '\x2', '\xF6', '\xF8', '\x5', '(', '\x15', '\x2', '\xF7', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x1A', '\x2', 
		'\x2', '\xFD', '\'', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', 
		'&', '\x2', '\x2', '\xFF', '\x100', '\x5', ':', '\x1E', '\x2', '\x100', 
		'\x102', '\a', ' ', '\x2', '\x2', '\x101', '\x103', '\x5', '\x14', '\v', 
		'\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x106', '\a', '\'', '\x2', '\x2', '\x105', '\x104', '\x3', '\x2', 
		'\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x109', '\a', '\x4', '\x2', '\x2', 
		'\x108', '\x107', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x110', '\x5', ',', '\x17', '\x2', '\x10B', '\x10D', '\a', '\x4', '\x2', 
		'\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x110', '\x5', '.', '\x18', '\x2', '\x10F', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x111', '\x116', '\x5', '\x34', '\x1B', 
		'\x2', '\x112', '\x113', '\a', '\a', '\x2', '\x2', '\x113', '\x115', '\x5', 
		'\x34', '\x1B', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11E', '\x5', '\x30', '\x19', '\x2', '\x11A', '\x11B', '\a', '\x6', 
		'\x2', '\x2', '\x11B', '\x11D', '\x5', '\x30', '\x19', '\x2', '\x11C', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x121', '\x126', '\x5', 
		'\x32', '\x1A', '\x2', '\x122', '\x123', '\a', '\x5', '\x2', '\x2', '\x123', 
		'\x125', '\x5', '\x32', '\x1A', '\x2', '\x124', '\x122', '\x3', '\x2', 
		'\x2', '\x2', '\x125', '\x128', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x31', '\x3', '\x2', '\x2', '\x2', '\x128', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x131', '\a', '.', '\x2', '\x2', '\x12A', 
		'\x131', '\a', '-', '\x2', '\x2', '\x12B', '\x131', '\x5', '@', '!', '\x2', 
		'\x12C', '\x12D', '\a', '\x12', '\x2', '\x2', '\x12D', '\x12E', '\x5', 
		'*', '\x16', '\x2', '\x12E', '\x12F', '\a', '\x13', '\x2', '\x2', '\x12F', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x130', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x33', '\x3', '\x2', '\x2', '\x2', '\x132', '\x137', '\x5', 
		'\x36', '\x1C', '\x2', '\x133', '\x134', '\a', '\v', '\x2', '\x2', '\x134', 
		'\x136', '\x5', '\x36', '\x1C', '\x2', '\x135', '\x133', '\x3', '\x2', 
		'\x2', '\x2', '\x136', '\x139', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x35', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13F', '\x5', '\x38', '\x1D', '\x2', '\x13B', 
		'\x13C', '\a', '\f', '\x2', '\x2', '\x13C', '\x13E', '\x5', '\x38', '\x1D', 
		'\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x148', '\x5', ':', '\x1E', '\x2', '\x143', '\x144', '\a', '\x12', '\x2', 
		'\x2', '\x144', '\x145', '\x5', ',', '\x17', '\x2', '\x145', '\x146', 
		'\a', '\x13', '\x2', '\x2', '\x146', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x142', '\x3', '\x2', '\x2', '\x2', '\x147', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x39', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14B', '\a', '\t', '\x2', '\x2', '\x14A', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\a', '.', '\x2', '\x2', 
		'\x14D', '\x14F', '\a', '\t', '\x2', '\x2', '\x14E', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x164', '\x5', '>', ' ', '\x2', 
		'\x151', '\x164', '\x5', '@', '!', '\x2', '\x152', '\x153', '\a', '.', 
		'\x2', '\x2', '\x153', '\x154', '\a', '(', '\x2', '\x2', '\x154', '\x164', 
		'\a', '.', '\x2', '\x2', '\x155', '\x156', '\a', '.', '\x2', '\x2', '\x156', 
		'\x158', '\a', '\x10', '\x2', '\x2', '\x157', '\x159', '\a', '\t', '\x2', 
		'\x2', '\x158', '\x157', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15C', '\x5', '<', '\x1F', '\x2', '\x15B', '\x15D', '\a', '\t', 
		'\x2', '\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x15F', '\a', '\x11', '\x2', '\x2', '\x15F', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x161', '\a', '.', '\x2', '\x2', '\x161', 
		'\x162', '\a', '(', '\x2', '\x2', '\x162', '\x164', '\x5', '@', '!', '\x2', 
		'\x163', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x163', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x151', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x163', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x160', '\x3', '\x2', '\x2', '\x2', '\x164', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x16C', '\a', '\x30', '\x2', '\x2', '\x166', 
		'\x16C', '\a', '.', '\x2', '\x2', '\x167', '\x168', '\a', '.', '\x2', 
		'\x2', '\x168', '\x169', '\a', '(', '\x2', '\x2', '\x169', '\x16C', '\a', 
		'.', '\x2', '\x2', '\x16A', '\x16C', '\x5', '@', '!', '\x2', '\x16B', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x16B', '\x167', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\t', '\x2', '\x2', '\x2', '\x16E', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x16F', '\x174', '\a', '.', '\x2', '\x2', '\x170', '\x171', 
		'\a', '(', '\x2', '\x2', '\x171', '\x173', '\a', '.', '\x2', '\x2', '\x172', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x173', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x172', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x174', '\x3', '\x2', '\x2', '\x2', '\x177', '\x17B', '\a', 
		'\x12', '\x2', '\x2', '\x178', '\x17A', '\x5', '\x42', '\"', '\x2', '\x179', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\a', 
		'\x13', '\x2', '\x2', '\x17F', '\x41', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x185', '\x5', ':', '\x1E', '\x2', '\x181', '\x182', '\a', '\x18', '\x2', 
		'\x2', '\x182', '\x184', '\x5', ':', '\x1E', '\x2', '\x183', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x183', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x43', '\x3', '\x2', '\x2', '\x2', '\x187', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18C', '\a', '.', '\x2', 
		'\x2', '\x189', '\x18C', '\x5', ':', '\x1E', '\x2', '\x18A', '\x18C', 
		'\x5', '*', '\x16', '\x2', '\x18B', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x45', '\x3', '\x2', '\x2', '\x2', ')', 
		'I', 'O', 'W', '\\', 'g', 'o', 'u', '\x8A', '\x8D', '\x93', '\x9D', '\xB0', 
		'\xB7', '\xC0', '\xC6', '\xDF', '\xF9', '\x102', '\x105', '\x108', '\x10C', 
		'\x10F', '\x116', '\x11E', '\x126', '\x130', '\x137', '\x13F', '\x147', 
		'\x14A', '\x14E', '\x158', '\x15C', '\x163', '\x16B', '\x174', '\x17B', 
		'\x185', '\x18B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
