//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from p4.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class p4Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Number=3, Function=4, Returns=5, Return=6, Lparen=7, Rparen=8, 
		Semicolon=9, Assign=10, Comma=11, Include=12, Begin=13, End=14, If=15, 
		Else=16, Then=17, For=18, While=19, Colon=20, Dotdotdot=21, Step=22, Foreach=23, 
		In=24, Switch=25, CaseKeyword=26, Break=27, Dot=28, LogOrOp=29, LogAndOp=30, 
		EqualityOp=31, RelOp=32, AddOp=33, MultOp=34, Lbracket=35, Rbracket=36, 
		Lbrace=37, Rbrace=38, CompoundOp=39, IncrementOp=40, Negation=41, NUMBER=42, 
		STRING=43, CHAR=44, BOOL=45, VOID=46, True=47, False=48, Id=49, Nonzero=50, 
		Decimal=51, Integer=52, String=53, Char=54, LineComment=55, MultiComment=56, 
		WS=57;
	public const int
		RULE_s = 0, RULE_importStmt = 1, RULE_stmt = 2, RULE_global = 3, RULE_main = 4, 
		RULE_block = 5, RULE_returnExpr = 6, RULE_funcDcl = 7, RULE_params = 8, 
		RULE_param = 9, RULE_returnsStmt = 10, RULE_assignment = 11, RULE_declaration = 12, 
		RULE_functioncall = 13, RULE_arguments = 14, RULE_controlStructure = 15, 
		RULE_ifStmt = 16, RULE_elseStmt = 17, RULE_loopStructure = 18, RULE_forexpr = 19, 
		RULE_whileexpr = 20, RULE_foreachexpr = 21, RULE_switchStmt = 22, RULE_switchBody = 23, 
		RULE_switchItem = 24, RULE_expr = 25, RULE_condExpr = 26, RULE_logORexpr = 27, 
		RULE_logANDexpr = 28, RULE_andExpr = 29, RULE_relExpr = 30, RULE_addExpr = 31, 
		RULE_multExpr = 32, RULE_exprList = 33, RULE_postExpr = 34, RULE_primExpr = 35, 
		RULE_literal = 36, RULE_postfix = 37, RULE_prefix = 38, RULE_valuetype = 39, 
		RULE_returntype = 40, RULE_value = 41, RULE_bool = 42, RULE_assnOp = 43, 
		RULE_modifier = 44;
	public static readonly string[] ruleNames = {
		"s", "importStmt", "stmt", "global", "main", "block", "returnExpr", "funcDcl", 
		"params", "param", "returnsStmt", "assignment", "declaration", "functioncall", 
		"arguments", "controlStructure", "ifStmt", "elseStmt", "loopStructure", 
		"forexpr", "whileexpr", "foreachexpr", "switchStmt", "switchBody", "switchItem", 
		"expr", "condExpr", "logORexpr", "logANDexpr", "andExpr", "relExpr", "addExpr", 
		"multExpr", "exprList", "postExpr", "primExpr", "literal", "postfix", 
		"prefix", "valuetype", "returntype", "value", "bool", "assnOp", "modifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'main'", "'?'", null, "'function'", "'returns'", "'return'", "'('", 
		"')'", "';'", "'='", "','", "'include'", "'begin'", "'end'", "'if'", "'else'", 
		"'then'", "'for'", "'while'", "':'", "'...'", "'step'", "'foreach'", "'in'", 
		"'switch'", "'case'", "'break'", "'.'", "'||'", "'&&'", null, null, null, 
		null, "'['", "']'", "'{'", "'}'", null, null, "'!'", "'number'", "'string'", 
		"'char'", "'bool'", "'void'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Number", "Function", "Returns", "Return", "Lparen", 
		"Rparen", "Semicolon", "Assign", "Comma", "Include", "Begin", "End", "If", 
		"Else", "Then", "For", "While", "Colon", "Dotdotdot", "Step", "Foreach", 
		"In", "Switch", "CaseKeyword", "Break", "Dot", "LogOrOp", "LogAndOp", 
		"EqualityOp", "RelOp", "AddOp", "MultOp", "Lbracket", "Rbracket", "Lbrace", 
		"Rbrace", "CompoundOp", "IncrementOp", "Negation", "NUMBER", "STRING", 
		"CHAR", "BOOL", "VOID", "True", "False", "Id", "Nonzero", "Decimal", "Integer", 
		"String", "Char", "LineComment", "MultiComment", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "p4.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static p4Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public p4Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public p4Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext[] importStmt() {
			return GetRuleContexts<ImportStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext importStmt(int i) {
			return GetRuleContext<ImportStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalContext[] global() {
			return GetRuleContexts<GlobalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalContext global(int i) {
			return GetRuleContext<GlobalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 0, RULE_s);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Include) {
				{
				{
				State = 90;
				importStmt();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 96;
					global();
					}
					} 
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 102;
				main();
				}
				break;
			}
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL))) != 0)) {
				{
				{
				State = 105;
				global();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(p4Parser.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(p4Parser.Semicolon, 0); }
		public ImportStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterImportStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitImportStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStmtContext importStmt() {
		ImportStmtContext _localctx = new ImportStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(Include);
			State = 112;
			Match(Id);
			State = 113;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(p4Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixContext postfix() {
			return GetRuleContext<PostfixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixContext prefix() {
			return GetRuleContext<PrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureContext controlStructure() {
			return GetRuleContext<ControlStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStructureContext loopStructure() {
			return GetRuleContext<LoopStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnExprContext returnExpr() {
			return GetRuleContext<ReturnExprContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				assignment();
				State = 116;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				declaration();
				State = 119;
				Match(Semicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				postfix();
				State = 122;
				Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				prefix();
				State = 125;
				Match(Semicolon);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 127;
				functioncall();
				State = 128;
				Match(Semicolon);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 130;
				controlStructure();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 131;
				loopStructure();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 132;
				returnExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(p4Parser.Semicolon, 0); }
		public GlobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterGlobal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitGlobal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalContext global() {
		GlobalContext _localctx = new GlobalContext(Context, State);
		EnterRule(_localctx, 6, RULE_global);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Function:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135;
				funcDcl();
				}
				break;
			case NUMBER:
			case STRING:
			case CHAR:
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				declaration();
				State = 137;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(p4Parser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Returns() { return GetToken(p4Parser.Returns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(p4Parser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 8, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(Function);
			State = 142;
			Match(T__0);
			State = 143;
			Match(Lparen);
			State = 144;
			Match(Rparen);
			State = 145;
			Match(Returns);
			State = 146;
			Match(VOID);
			State = 147;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(p4Parser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(p4Parser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(Begin);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Return) | (1L << If) | (1L << For) | (1L << While) | (1L << Foreach) | (1L << Switch) | (1L << IncrementOp) | (1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL) | (1L << Id))) != 0)) {
				{
				{
				State = 150;
				stmt();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(p4Parser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(p4Parser.Semicolon, 0); }
		public ReturnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterReturnExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitReturnExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExprContext returnExpr() {
		ReturnExprContext _localctx = new ReturnExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_returnExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(Return);
			State = 159;
			expr();
			State = 160;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(p4Parser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnsStmtContext returnsStmt() {
			return GetRuleContext<ReturnsStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(Function);
			State = 163;
			Match(Id);
			State = 164;
			Match(Lparen);
			State = 165;
			@params();
			State = 166;
			Match(Rparen);
			State = 167;
			returnsStmt();
			State = 168;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 16, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL))) != 0)) {
				{
				State = 170;
				param();
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 171;
					Match(Comma);
					State = 172;
					param();
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValuetypeContext valuetype() {
			return GetRuleContext<ValuetypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 18, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			valuetype();
			State = 181;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnsStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Returns() { return GetToken(p4Parser.Returns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturntypeContext returntype() {
			return GetRuleContext<ReturntypeContext>(0);
		}
		public ReturnsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnsStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterReturnsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitReturnsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnsStmtContext returnsStmt() {
		ReturnsStmtContext _localctx = new ReturnsStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_returnsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(Returns);
			State = 184;
			returntype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssnOpContext assnOp() {
			return GetRuleContext<AssnOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(Id);
			State = 187;
			assnOp();
			State = 188;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValuetypeContext valuetype() {
			return GetRuleContext<ValuetypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(p4Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			valuetype();
			State = 191;
			Match(Id);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Lbracket) {
				{
				State = 192;
				modifier();
				}
			}

			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 195;
				Match(Assign);
				State = 196;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 26, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(Id);
			State = 200;
			Match(Lparen);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << Lparen) | (1L << Lbrace) | (1L << IncrementOp) | (1L << Negation) | (1L << True) | (1L << False) | (1L << Id) | (1L << String) | (1L << Char))) != 0)) {
				{
				State = 201;
				arguments();
				}
			}

			State = 204;
			Match(Rparen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			expr();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 207;
				Match(Comma);
				State = 208;
				expr();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		public ControlStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterControlStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitControlStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructureContext controlStructure() {
		ControlStructureContext _localctx = new ControlStructureContext(Context, State);
		EnterRule(_localctx, 30, RULE_controlStructure);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				ifStmt();
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				switchStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(p4Parser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(If);
			State = 219;
			Match(Lparen);
			State = 220;
			expr();
			State = 221;
			Match(Rparen);
			State = 222;
			block();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 223;
				elseStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(p4Parser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseStmt);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				Match(Else);
				State = 227;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				Match(Else);
				State = 229;
				ifStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForexprContext forexpr() {
			return GetRuleContext<ForexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachexprContext foreachexpr() {
			return GetRuleContext<ForeachexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileexprContext whileexpr() {
			return GetRuleContext<WhileexprContext>(0);
		}
		public LoopStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLoopStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLoopStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStructureContext loopStructure() {
		LoopStructureContext _localctx = new LoopStructureContext(Context, State);
		EnterRule(_localctx, 36, RULE_loopStructure);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case For:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				forexpr();
				}
				break;
			case Foreach:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				foreachexpr();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234;
				whileexpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(p4Parser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(p4Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dotdotdot() { return GetToken(p4Parser.Dotdotdot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(p4Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Step() { return GetToken(p4Parser.Step, 0); }
		public ForexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterForexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitForexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForexprContext forexpr() {
		ForexprContext _localctx = new ForexprContext(Context, State);
		EnterRule(_localctx, 38, RULE_forexpr);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237;
				Match(For);
				State = 238;
				Match(Lparen);
				State = 239;
				Match(Id);
				State = 240;
				Match(Colon);
				State = 241;
				expr();
				State = 242;
				Match(Dotdotdot);
				State = 243;
				expr();
				State = 244;
				Match(Rparen);
				State = 245;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(For);
				State = 248;
				Match(Lparen);
				State = 249;
				Match(Id);
				State = 250;
				Match(Colon);
				State = 251;
				expr();
				State = 252;
				Match(Dotdotdot);
				State = 253;
				expr();
				State = 254;
				Match(Comma);
				State = 255;
				Match(Step);
				State = 256;
				expr();
				State = 257;
				Match(Rparen);
				State = 258;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(p4Parser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterWhileexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitWhileexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexprContext whileexpr() {
		WhileexprContext _localctx = new WhileexprContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(While);
			State = 263;
			Match(Lparen);
			State = 264;
			expr();
			State = 265;
			Match(Rparen);
			State = 266;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Foreach() { return GetToken(p4Parser.Foreach, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(p4Parser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(p4Parser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(p4Parser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForeachexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterForeachexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitForeachexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachexprContext foreachexpr() {
		ForeachexprContext _localctx = new ForeachexprContext(Context, State);
		EnterRule(_localctx, 42, RULE_foreachexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(Foreach);
			State = 269;
			Match(Lparen);
			State = 270;
			Match(Id);
			State = 271;
			Match(In);
			State = 272;
			Match(Id);
			State = 273;
			Match(Rparen);
			State = 274;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(p4Parser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBodyContext switchBody() {
			return GetRuleContext<SwitchBodyContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_switchStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(Switch);
			State = 277;
			Match(Lparen);
			State = 278;
			Match(Id);
			State = 279;
			Match(Rparen);
			State = 280;
			switchBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(p4Parser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(p4Parser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchItemContext[] switchItem() {
			return GetRuleContexts<SwitchItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchItemContext switchItem(int i) {
			return GetRuleContext<SwitchItemContext>(i);
		}
		public SwitchBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBodyContext switchBody() {
		SwitchBodyContext _localctx = new SwitchBodyContext(Context, State);
		EnterRule(_localctx, 46, RULE_switchBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(Begin);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CaseKeyword) {
				{
				{
				State = 283;
				switchItem();
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 289;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CaseKeyword() { return GetToken(p4Parser.CaseKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(p4Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(p4Parser.Break, 0); }
		public SwitchItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchItemContext switchItem() {
		SwitchItemContext _localctx = new SwitchItemContext(Context, State);
		EnterRule(_localctx, 48, RULE_switchItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(CaseKeyword);
			State = 292;
			expr();
			State = 293;
			Match(Colon);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Begin) {
				{
				State = 294;
				block();
				}
			}

			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Break) {
				{
				State = 297;
				Match(Break);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondExprContext condExpr() {
			return GetRuleContext<CondExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Negation() { return GetToken(p4Parser.Negation, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Negation) {
				{
				State = 300;
				Match(Negation);
				}
			}

			State = 303;
			condExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogORexprContext logORexpr() {
			return GetRuleContext<LogORexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(p4Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondExprContext condExpr() {
			return GetRuleContext<CondExprContext>(0);
		}
		public CondExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondExprContext condExpr() {
		CondExprContext _localctx = new CondExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_condExpr);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				logORexpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				logORexpr(0);
				State = 307;
				Match(T__1);
				State = 308;
				expr();
				State = 309;
				Match(Colon);
				State = 310;
				condExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogORexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogANDexprContext logANDexpr() {
			return GetRuleContext<LogANDexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogORexprContext logORexpr() {
			return GetRuleContext<LogORexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogOrOp() { return GetToken(p4Parser.LogOrOp, 0); }
		public LogORexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logORexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLogORexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLogORexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogORexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogORexprContext logORexpr() {
		return logORexpr(0);
	}

	private LogORexprContext logORexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogORexprContext _localctx = new LogORexprContext(Context, _parentState);
		LogORexprContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_logORexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 315;
			logANDexpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogORexprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logORexpr);
					State = 317;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 318;
					Match(LogOrOp);
					State = 319;
					logANDexpr(0);
					}
					} 
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogANDexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr() {
			return GetRuleContext<AndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogANDexprContext logANDexpr() {
			return GetRuleContext<LogANDexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogAndOp() { return GetToken(p4Parser.LogAndOp, 0); }
		public LogANDexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logANDexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLogANDexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLogANDexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogANDexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogANDexprContext logANDexpr() {
		return logANDexpr(0);
	}

	private LogANDexprContext logANDexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogANDexprContext _localctx = new LogANDexprContext(Context, _parentState);
		LogANDexprContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_logANDexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 326;
			andExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogANDexprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logANDexpr);
					State = 328;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 329;
					Match(LogAndOp);
					State = 330;
					andExpr(0);
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelExprContext relExpr() {
			return GetRuleContext<RelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr() {
			return GetRuleContext<AndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqualityOp() { return GetToken(p4Parser.EqualityOp, 0); }
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		return andExpr(0);
	}

	private AndExprContext andExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExprContext _localctx = new AndExprContext(Context, _parentState);
		AndExprContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_andExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 337;
			relExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpr);
					State = 339;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 340;
					Match(EqualityOp);
					State = 341;
					relExpr(0);
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext addExpr() {
			return GetRuleContext<AddExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelExprContext relExpr() {
			return GetRuleContext<RelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RelOp() { return GetToken(p4Parser.RelOp, 0); }
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		return relExpr(0);
	}

	private RelExprContext relExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelExprContext _localctx = new RelExprContext(Context, _parentState);
		RelExprContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_relExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 348;
			addExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relExpr);
					State = 350;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 351;
					Match(RelOp);
					State = 352;
					addExpr(0);
					}
					} 
				}
				State = 357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExprContext multExpr() {
			return GetRuleContext<MultExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext addExpr() {
			return GetRuleContext<AddExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AddOp() { return GetToken(p4Parser.AddOp, 0); }
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		return addExpr(0);
	}

	private AddExprContext addExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AddExprContext _localctx = new AddExprContext(Context, _parentState);
		AddExprContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_addExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 359;
			multExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_addExpr);
					State = 361;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 362;
					Match(AddOp);
					State = 363;
					multExpr(0);
					}
					} 
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostExprContext postExpr() {
			return GetRuleContext<PostExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExprContext multExpr() {
			return GetRuleContext<MultExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultOp() { return GetToken(p4Parser.MultOp, 0); }
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		return multExpr(0);
	}

	private MultExprContext multExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultExprContext _localctx = new MultExprContext(Context, _parentState);
		MultExprContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_multExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 370;
			postExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 377;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multExpr);
					State = 372;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 373;
					Match(MultOp);
					State = 374;
					postExpr();
					}
					} 
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(p4Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 66, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			expr();
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 381;
				Match(Comma);
				State = 382;
				exprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimExprContext primExpr() {
			return GetRuleContext<PrimExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(p4Parser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(p4Parser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbracket() { return GetToken(p4Parser.Lbracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbracket() { return GetToken(p4Parser.Rbracket, 0); }
		public PostExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterPostExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitPostExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostExprContext postExpr() {
		PostExprContext _localctx = new PostExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_postExpr);
		try {
			State = 395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385;
				primExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386;
				Match(Lbrace);
				State = 387;
				exprList();
				State = 388;
				Match(Rbrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 390;
				Match(Id);
				State = 391;
				Match(Lbracket);
				State = 392;
				expr();
				State = 393;
				Match(Rbracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostfixContext postfix() {
			return GetRuleContext<PostfixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixContext prefix() {
			return GetRuleContext<PrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public PrimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterPrimExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitPrimExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimExprContext primExpr() {
		PrimExprContext _localctx = new PrimExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_primExpr);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 397;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398;
				Match(Lparen);
				State = 399;
				expr();
				State = 400;
				Match(Rparen);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402;
				Match(Id);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403;
				postfix();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 404;
				prefix();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 405;
				functioncall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 72, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncrementOp() { return GetToken(p4Parser.IncrementOp, 0); }
		public PostfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterPostfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitPostfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixContext postfix() {
		PostfixContext _localctx = new PostfixContext(Context, State);
		EnterRule(_localctx, 74, RULE_postfix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(Id);
			State = 411;
			Match(IncrementOp);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncrementOp() { return GetToken(p4Parser.IncrementOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		public PrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixContext prefix() {
		PrefixContext _localctx = new PrefixContext(Context, State);
		EnterRule(_localctx, 76, RULE_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(IncrementOp);
			State = 414;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuetypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(p4Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(p4Parser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(p4Parser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(p4Parser.STRING, 0); }
		public ValuetypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuetype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterValuetype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitValuetype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuetype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuetypeContext valuetype() {
		ValuetypeContext _localctx = new ValuetypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_valuetype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturntypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(p4Parser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuetypeContext valuetype() {
			return GetRuleContext<ValuetypeContext>(0);
		}
		public ReturntypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returntype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterReturntype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitReturntype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturntype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturntypeContext returntype() {
		ReturntypeContext _localctx = new ReturntypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_returntype);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418;
				Match(VOID);
				}
				break;
			case NUMBER:
			case STRING:
			case CHAR:
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419;
				valuetype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(p4Parser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(p4Parser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(p4Parser.String, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 82, RULE_value);
		try {
			State = 426;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				Match(Number);
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423;
				@bool();
				}
				break;
			case Char:
				EnterOuterAlt(_localctx, 3);
				{
				State = 424;
				Match(Char);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 4);
				{
				State = 425;
				Match(String);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(p4Parser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(p4Parser.False, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 84, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssnOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(p4Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CompoundOp() { return GetToken(p4Parser.CompoundOp, 0); }
		public AssnOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assnOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAssnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAssnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssnOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssnOpContext assnOp() {
		AssnOpContext _localctx = new AssnOpContext(Context, State);
		EnterRule(_localctx, 86, RULE_assnOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			_la = TokenStream.LA(1);
			if ( !(_la==Assign || _la==CompoundOp) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbracket() { return GetToken(p4Parser.Lbracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbracket() { return GetToken(p4Parser.Rbracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nonzero() { return GetToken(p4Parser.Nonzero, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(Lbracket);
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Nonzero) {
				{
				State = 433;
				Match(Nonzero);
				}
			}

			State = 436;
			Match(Rbracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return logORexpr_sempred((LogORexprContext)_localctx, predIndex);
		case 28: return logANDexpr_sempred((LogANDexprContext)_localctx, predIndex);
		case 29: return andExpr_sempred((AndExprContext)_localctx, predIndex);
		case 30: return relExpr_sempred((RelExprContext)_localctx, predIndex);
		case 31: return addExpr_sempred((AddExprContext)_localctx, predIndex);
		case 32: return multExpr_sempred((MultExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logORexpr_sempred(LogORexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logANDexpr_sempred(LogANDexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool andExpr_sempred(AndExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool relExpr_sempred(RelExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool addExpr_sempred(AddExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multExpr_sempred(MultExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\x1B9', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x3', '\x2', '\a', 
		'\x2', '^', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x61', '\v', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x64', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'g', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', 'j', '\n', '\x2', '\x3', 
		'\x2', '\a', '\x2', 'm', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'p', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x88', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x8E', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x9A', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x9D', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xB0', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\xB3', '\v', '\n', '\x5', '\n', '\xB5', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xC4', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xC8', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xCD', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\xD4', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xD7', '\v', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xDB', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\xE3', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xE9', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xEE', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x107', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x11F', '\n', 
		'\x19', '\f', '\x19', '\xE', '\x19', '\x122', '\v', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x12A', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x12D', 
		'\n', '\x1A', '\x3', '\x1B', '\x5', '\x1B', '\x130', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x13B', 
		'\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x143', '\n', '\x1D', '\f', 
		'\x1D', '\xE', '\x1D', '\x146', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', 
		'\x14E', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x151', '\v', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\a', '\x1F', '\x159', '\n', '\x1F', '\f', '\x1F', '\xE', 
		'\x1F', '\x15C', '\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x164', '\n', ' ', '\f', ' ', 
		'\xE', ' ', '\x167', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\a', '!', '\x16F', '\n', '!', '\f', '!', 
		'\xE', '!', '\x172', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x17A', '\n', '\"', 
		'\f', '\"', '\xE', '\"', '\x17D', '\v', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x182', '\n', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x5', '$', '\x18E', '\n', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x5', '%', '\x199', '\n', '%', '\x3', '&', '\x3', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		')', '\x3', ')', '\x3', '*', '\x3', '*', '\x5', '*', '\x1A7', '\n', '*', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x1AD', '\n', 
		'+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x1B5', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x2', '\b', '\x38', ':', '<', '>', '@', '\x42', '/', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\x2', '\x5', '\x3', '\x2', 
		',', '/', '\x3', '\x2', '\x31', '\x32', '\x4', '\x2', '\f', '\f', ')', 
		')', '\x2', '\x1BC', '\x2', '_', '\x3', '\x2', '\x2', '\x2', '\x4', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x8D', '\x3', '\x2', '\x2', '\x2', '\n', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x97', '\x3', '\x2', '\x2', '\x2', '\xE', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x18', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xDA', '\x3', '\x2', '\x2', '\x2', '\"', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xE8', '\x3', '\x2', '\x2', '\x2', '&', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x108', '\x3', '\x2', '\x2', '\x2', ',', '\x10E', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x116', '\x3', '\x2', '\x2', '\x2', '\x30', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x36', '\x13A', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x13C', '\x3', '\x2', '\x2', '\x2', ':', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x15D', '\x3', '\x2', '\x2', '\x2', '@', '\x168', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x173', '\x3', '\x2', '\x2', '\x2', '\x44', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x198', '\x3', '\x2', '\x2', '\x2', 'J', '\x19A', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x19C', '\x3', '\x2', '\x2', '\x2', 'N', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1A6', '\x3', '\x2', '\x2', '\x2', 'T', '\x1AC', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1AE', '\x3', '\x2', '\x2', '\x2', 'X', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\\', '^', '\x5', '\x4', '\x3', '\x2', ']', '\\', '\x3', '\x2', '\x2', 
		'\x2', '^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x64', '\x5', '\b', '\x5', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'h', 'j', '\x5', '\n', '\x6', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'n', '\x3', '\x2', '\x2', '\x2', 
		'k', 'm', '\x5', '\b', '\x5', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\xE', '\x2', 
		'\x2', 'r', 's', '\a', '\x33', '\x2', '\x2', 's', 't', '\a', '\v', '\x2', 
		'\x2', 't', '\x5', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\x18', 
		'\r', '\x2', 'v', 'w', '\a', '\v', '\x2', '\x2', 'w', '\x88', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\x5', '\x1A', '\xE', '\x2', 'y', 'z', '\a', '\v', 
		'\x2', '\x2', 'z', '\x88', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x5', 
		'L', '\'', '\x2', '|', '}', '\a', '\v', '\x2', '\x2', '}', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\x5', 'N', '(', '\x2', '\x7F', '\x80', 
		'\a', '\v', '\x2', '\x2', '\x80', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\x5', '\x1C', '\xF', '\x2', '\x82', '\x83', '\a', '\v', 
		'\x2', '\x2', '\x83', '\x88', '\x3', '\x2', '\x2', '\x2', '\x84', '\x88', 
		'\x5', ' ', '\x11', '\x2', '\x85', '\x88', '\x5', '&', '\x14', '\x2', 
		'\x86', '\x88', '\x5', '\xE', '\b', '\x2', '\x87', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x87', 'x', '\x3', '\x2', '\x2', '\x2', '\x87', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '~', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x87', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\a', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8E', '\x5', '\x10', '\t', '\x2', '\x8A', '\x8B', '\x5', '\x1A', '\xE', 
		'\x2', '\x8B', '\x8C', '\a', '\v', '\x2', '\x2', '\x8C', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8E', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\a', '\x6', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\x3', '\x2', '\x2', '\x91', '\x92', '\a', '\t', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\n', '\x2', '\x2', '\x93', '\x94', '\a', '\a', '\x2', '\x2', 
		'\x94', '\x95', '\a', '\x30', '\x2', '\x2', '\x95', '\x96', '\x5', '\f', 
		'\a', '\x2', '\x96', '\v', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9B', 
		'\a', '\xF', '\x2', '\x2', '\x98', '\x9A', '\x5', '\x6', '\x4', '\x2', 
		'\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x10', 
		'\x2', '\x2', '\x9F', '\r', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\a', '\b', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\x34', '\x1B', '\x2', 
		'\xA2', '\xA3', '\a', '\v', '\x2', '\x2', '\xA3', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '\x6', '\x2', '\x2', '\xA5', '\xA6', 
		'\a', '\x33', '\x2', '\x2', '\xA6', '\xA7', '\a', '\t', '\x2', '\x2', 
		'\xA7', '\xA8', '\x5', '\x12', '\n', '\x2', '\xA8', '\xA9', '\a', '\n', 
		'\x2', '\x2', '\xA9', '\xAA', '\x5', '\x16', '\f', '\x2', '\xAA', '\xAB', 
		'\x5', '\f', '\a', '\x2', '\xAB', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xB1', '\x5', '\x14', '\v', '\x2', '\xAD', '\xAE', '\a', '\r', 
		'\x2', '\x2', '\xAE', '\xB0', '\x5', '\x14', '\v', '\x2', '\xAF', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB7', '\x5', 'P', ')', '\x2', '\xB7', '\xB8', 
		'\a', '\x33', '\x2', '\x2', '\xB8', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\xBA', '\a', '\a', '\x2', '\x2', '\xBA', '\xBB', '\x5', 'R', 
		'*', '\x2', '\xBB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\a', '\x33', '\x2', '\x2', '\xBD', '\xBE', '\x5', 'X', '-', '\x2', '\xBE', 
		'\xBF', '\x5', '\x34', '\x1B', '\x2', '\xBF', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\x5', 'P', ')', '\x2', '\xC1', '\xC3', '\a', '\x33', 
		'\x2', '\x2', '\xC2', '\xC4', '\x5', 'Z', '.', '\x2', '\xC3', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\f', 
		'\x2', '\x2', '\xC6', '\xC8', '\x5', '\x34', '\x1B', '\x2', '\xC7', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x33', 
		'\x2', '\x2', '\xCA', '\xCC', '\a', '\t', '\x2', '\x2', '\xCB', '\xCD', 
		'\x5', '\x1E', '\x10', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\a', '\n', '\x2', '\x2', '\xCF', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD5', '\x5', '\x34', '\x1B', '\x2', 
		'\xD1', '\xD2', '\a', '\r', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x34', 
		'\x1B', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', 
		'\x5', '\"', '\x12', '\x2', '\xD9', '\xDB', '\x5', '.', '\x18', '\x2', 
		'\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '!', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', 
		'\a', '\x11', '\x2', '\x2', '\xDD', '\xDE', '\a', '\t', '\x2', '\x2', 
		'\xDE', '\xDF', '\x5', '\x34', '\x1B', '\x2', '\xDF', '\xE0', '\a', '\n', 
		'\x2', '\x2', '\xE0', '\xE2', '\x5', '\f', '\a', '\x2', '\xE1', '\xE3', 
		'\x5', '$', '\x13', '\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\a', '\x12', '\x2', '\x2', '\xE5', '\xE9', 
		'\x5', '\f', '\a', '\x2', '\xE6', '\xE7', '\a', '\x12', '\x2', '\x2', 
		'\xE7', '\xE9', '\x5', '\"', '\x12', '\x2', '\xE8', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '%', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEE', '\x5', '(', '\x15', '\x2', 
		'\xEB', '\xEE', '\x5', ',', '\x17', '\x2', '\xEC', '\xEE', '\x5', '*', 
		'\x16', '\x2', '\xED', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\'', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x14', 
		'\x2', '\x2', '\xF0', '\xF1', '\a', '\t', '\x2', '\x2', '\xF1', '\xF2', 
		'\a', '\x33', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x16', '\x2', '\x2', 
		'\xF3', '\xF4', '\x5', '\x34', '\x1B', '\x2', '\xF4', '\xF5', '\a', '\x17', 
		'\x2', '\x2', '\xF5', '\xF6', '\x5', '\x34', '\x1B', '\x2', '\xF6', '\xF7', 
		'\a', '\n', '\x2', '\x2', '\xF7', '\xF8', '\x5', '\f', '\a', '\x2', '\xF8', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x14', '\x2', 
		'\x2', '\xFA', '\xFB', '\a', '\t', '\x2', '\x2', '\xFB', '\xFC', '\a', 
		'\x33', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x16', '\x2', '\x2', '\xFD', 
		'\xFE', '\x5', '\x34', '\x1B', '\x2', '\xFE', '\xFF', '\a', '\x17', '\x2', 
		'\x2', '\xFF', '\x100', '\x5', '\x34', '\x1B', '\x2', '\x100', '\x101', 
		'\a', '\r', '\x2', '\x2', '\x101', '\x102', '\a', '\x18', '\x2', '\x2', 
		'\x102', '\x103', '\x5', '\x34', '\x1B', '\x2', '\x103', '\x104', '\a', 
		'\n', '\x2', '\x2', '\x104', '\x105', '\x5', '\f', '\a', '\x2', '\x105', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x107', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x109', '\a', '\x15', '\x2', '\x2', '\x109', 
		'\x10A', '\a', '\t', '\x2', '\x2', '\x10A', '\x10B', '\x5', '\x34', '\x1B', 
		'\x2', '\x10B', '\x10C', '\a', '\n', '\x2', '\x2', '\x10C', '\x10D', '\x5', 
		'\f', '\a', '\x2', '\x10D', '+', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10F', '\a', '\x19', '\x2', '\x2', '\x10F', '\x110', '\a', '\t', '\x2', 
		'\x2', '\x110', '\x111', '\a', '\x33', '\x2', '\x2', '\x111', '\x112', 
		'\a', '\x1A', '\x2', '\x2', '\x112', '\x113', '\a', '\x33', '\x2', '\x2', 
		'\x113', '\x114', '\a', '\n', '\x2', '\x2', '\x114', '\x115', '\x5', '\f', 
		'\a', '\x2', '\x115', '-', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', 
		'\a', '\x1B', '\x2', '\x2', '\x117', '\x118', '\a', '\t', '\x2', '\x2', 
		'\x118', '\x119', '\a', '\x33', '\x2', '\x2', '\x119', '\x11A', '\a', 
		'\n', '\x2', '\x2', '\x11A', '\x11B', '\x5', '\x30', '\x19', '\x2', '\x11B', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x120', '\a', '\xF', '\x2', 
		'\x2', '\x11D', '\x11F', '\x5', '\x32', '\x1A', '\x2', '\x11E', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x123', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\x10', '\x2', 
		'\x2', '\x124', '\x31', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\a', '\x1C', '\x2', '\x2', '\x126', '\x127', '\x5', '\x34', '\x1B', '\x2', 
		'\x127', '\x129', '\a', '\x16', '\x2', '\x2', '\x128', '\x12A', '\x5', 
		'\f', '\a', '\x2', '\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12D', '\a', '\x1D', '\x2', '\x2', '\x12C', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x33', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x130', '\a', '+', 
		'\x2', '\x2', '\x12F', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x132', '\x5', '\x36', '\x1C', '\x2', '\x132', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x13B', '\x5', '\x38', '\x1D', '\x2', '\x134', 
		'\x135', '\x5', '\x38', '\x1D', '\x2', '\x135', '\x136', '\a', '\x4', 
		'\x2', '\x2', '\x136', '\x137', '\x5', '\x34', '\x1B', '\x2', '\x137', 
		'\x138', '\a', '\x16', '\x2', '\x2', '\x138', '\x139', '\x5', '\x36', 
		'\x1C', '\x2', '\x139', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x37', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', 
		'\b', '\x1D', '\x1', '\x2', '\x13D', '\x13E', '\x5', ':', '\x1E', '\x2', 
		'\x13E', '\x144', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\f', 
		'\x4', '\x2', '\x2', '\x140', '\x141', '\a', '\x1F', '\x2', '\x2', '\x141', 
		'\x143', '\x5', ':', '\x1E', '\x2', '\x142', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x146', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x39', '\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x148', '\b', '\x1E', '\x1', '\x2', '\x148', 
		'\x149', '\x5', '<', '\x1F', '\x2', '\x149', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\f', '\x4', '\x2', '\x2', '\x14B', '\x14C', 
		'\a', ' ', '\x2', '\x2', '\x14C', '\x14E', '\x5', '<', '\x1F', '\x2', 
		'\x14D', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x150', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\b', '\x1F', '\x1', '\x2', '\x153', '\x154', '\x5', '>', ' ', '\x2', 
		'\x154', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\f', 
		'\x4', '\x2', '\x2', '\x156', '\x157', '\a', '!', '\x2', '\x2', '\x157', 
		'\x159', '\x5', '>', ' ', '\x2', '\x158', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '=', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x15D', '\x15E', '\b', ' ', '\x1', '\x2', '\x15E', '\x15F', 
		'\x5', '@', '!', '\x2', '\x15F', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x161', '\f', '\x4', '\x2', '\x2', '\x161', '\x162', '\a', '\"', 
		'\x2', '\x2', '\x162', '\x164', '\x5', '@', '!', '\x2', '\x163', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '?', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\b', '!', '\x1', 
		'\x2', '\x169', '\x16A', '\x5', '\x42', '\"', '\x2', '\x16A', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\f', '\x4', '\x2', '\x2', 
		'\x16C', '\x16D', '\a', '#', '\x2', '\x2', '\x16D', '\x16F', '\x5', '\x42', 
		'\"', '\x2', '\x16E', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x171', '\x3', '\x2', '\x2', '\x2', '\x171', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x174', '\b', '\"', '\x1', '\x2', '\x174', '\x175', '\x5', '\x46', '$', 
		'\x2', '\x175', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', 
		'\f', '\x4', '\x2', '\x2', '\x177', '\x178', '\a', '$', '\x2', '\x2', 
		'\x178', '\x17A', '\x5', '\x46', '$', '\x2', '\x179', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17B', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x43', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', '\x5', '\x34', '\x1B', '\x2', 
		'\x17F', '\x180', '\a', '\r', '\x2', '\x2', '\x180', '\x182', '\x5', '\x44', 
		'#', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x18E', '\x5', 'H', '%', '\x2', '\x184', '\x185', '\a', '\'', 
		'\x2', '\x2', '\x185', '\x186', '\x5', '\x44', '#', '\x2', '\x186', '\x187', 
		'\a', '(', '\x2', '\x2', '\x187', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x189', '\a', '\x33', '\x2', '\x2', '\x189', '\x18A', '\a', 
		'%', '\x2', '\x2', '\x18A', '\x18B', '\x5', '\x34', '\x1B', '\x2', '\x18B', 
		'\x18C', '\a', '&', '\x2', '\x2', '\x18C', '\x18E', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x183', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x18D', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', 'G', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x199', '\x5', 'J', 
		'&', '\x2', '\x190', '\x191', '\a', '\t', '\x2', '\x2', '\x191', '\x192', 
		'\x5', '\x34', '\x1B', '\x2', '\x192', '\x193', '\a', '\n', '\x2', '\x2', 
		'\x193', '\x199', '\x3', '\x2', '\x2', '\x2', '\x194', '\x199', '\a', 
		'\x33', '\x2', '\x2', '\x195', '\x199', '\x5', 'L', '\'', '\x2', '\x196', 
		'\x199', '\x5', 'N', '(', '\x2', '\x197', '\x199', '\x5', '\x1C', '\xF', 
		'\x2', '\x198', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x198', '\x190', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x194', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x195', '\x3', '\x2', '\x2', '\x2', '\x198', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x197', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x5', 'T', '+', '\x2', 
		'\x19B', 'K', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\a', '\x33', 
		'\x2', '\x2', '\x19D', '\x19E', '\a', '*', '\x2', '\x2', '\x19E', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '*', '\x2', '\x2', 
		'\x1A0', '\x1A1', '\a', '\x33', '\x2', '\x2', '\x1A1', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2', '\x1A3', '\t', '\x2', '\x2', '\x2', '\x1A3', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A7', '\a', '\x30', '\x2', '\x2', 
		'\x1A5', '\x1A7', '\x5', 'P', ')', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', 'S', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AD', '\a', '\x5', '\x2', '\x2', 
		'\x1A9', '\x1AD', '\x5', 'V', ',', '\x2', '\x1AA', '\x1AD', '\a', '\x38', 
		'\x2', '\x2', '\x1AB', '\x1AD', '\a', '\x37', '\x2', '\x2', '\x1AC', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', 'U', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1AF', '\t', '\x3', '\x2', '\x2', '\x1AF', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1B1', '\t', '\x4', '\x2', '\x2', '\x1B1', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x1B2', '\x1B4', '\a', '%', '\x2', '\x2', '\x1B3', 
		'\x1B5', '\a', '\x34', '\x2', '\x2', '\x1B4', '\x1B3', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\a', '&', '\x2', '\x2', 
		'\x1B7', '[', '\x3', '\x2', '\x2', '\x2', '%', '_', '\x65', 'i', 'n', 
		'\x87', '\x8D', '\x9B', '\xB1', '\xB4', '\xC3', '\xC7', '\xCC', '\xD5', 
		'\xDA', '\xE2', '\xE8', '\xED', '\x106', '\x120', '\x129', '\x12C', '\x12F', 
		'\x13A', '\x144', '\x14F', '\x15A', '\x165', '\x170', '\x17B', '\x181', 
		'\x18D', '\x198', '\x1A6', '\x1AC', '\x1B4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
