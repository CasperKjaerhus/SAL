grammar p4;
S 			:	Importstmts Stmts ;
Importstmts :	Importstmt Importstmts
			|	;
Stmts 		:	Dcl Stmts
			|	;
Importstmt 	:	'include' [a-zA-Z]+'.h';
Dcl 		:	FuncDcl
			|	VarDcl;
VarDcl 		:	Type Id Modifier
			|	Type Id Modifier Assignment Val;
Modifier 	:	Lbracket Size Rbracket
			|	Lbracket Rbracket
			|	;
Size		:	[0-9]+;
FuncDcl 	:	Function Id Lparen Params Rparen Returns Type Body;
Id 			:	[a-zA-Z]+[a-zA-Z0-9_]*;
Num 		:	[0-9]+; //wtf
Params 		:	ParamList Param
			|	Param
			|	;
ParamList 	:	Param Comma ParamList
			|	;
Param 		:	Type Id;
Type 		:	'number'
			|	'string'
			|	'char'
			|	'bool';
Body 		:	Begin Expr End;
Expr 		:	VarDcl Expr
			|	ControlExpr Expr
			|	FunctioncallExpr Expr
			|	ReturnExpr Expr
			|	;
ValueExpr 	:	FunctioncallExpr
			|	LogicalExpr
			|	AddExpr
			|	Val;
AddExpr 	:	MulExpr OuterExpr;
OuterExpr 	:	Addop MulExpr
			|	;
MulExpr 	:	InnerVal InnerExpr;
InnerExpr 	:	Mulop InnerVal
			|	;
InnerVal 	:	Val
			|	Lparen ValueExpr Rparen;
ControlExpr :	IfExpr
			|	ForExpr
			|	WhileExpr
			|	ForeachExpr
			|	SwitchExpr;
IfExpr 		:	If Lparen LogicalExpr Rparen Then Body ElseExpr;
ElseExpr 	:	Else Body
			|	Else IfExpr
			|	;
LogicalExpr :	Val Boolop ValueExpr;
Boolop 		:	Relationalop
			|	Logicalop;
Relationalop :	'<'
			|	'>'
			|	'=='
			|	'!='
			|	'<='
			|	'>=';
Logicalop 	:	'&&'
			|	'||';
Addop 		:	'+'
			|	'-';
Mulop 		:	'*'
			|	'/'
			|	'%';
ForExpr 	:	For Lparen Id Colon ValueExpr Dotdotdot ValueExpr Rparen Body
			|	For Lparen Id Colon ValueExpr Dotdotdot ValueExpr Comma Step ValueExpr Rparen Body;
WhileExpr 	:	While Lparen LogicalExpr Rparen Body;
ForeachExpr :	Foreach Lparen Id In Id Rparen Body;
SwitchExpr 	:	Switch Lparen Id Rparen Switchbody;
Switchbody 	:	Begin Case Caselist End;
Caselist 	:	Case Caselist
			|	;
Case 		:	CaseKeyword Val Colon Expr
			|	CaseKeyword Val Colon Expr Break;
FunctioncallExpr :	Functionname Lparen Arguments Rparen;
Arguments 	:	ArgList Arg
			|	Arg
			|	;
ArgList 	:	Arg Comma ArgList
			|	;
Arg 		:	Val;
Functionname :	[a-zA-Z]+[a-zA-Z0-9_]*; //wtf why no bare id?
ReturnExpr 	:	Return Val;
Val 		:	Id
			|	Num;
Assignment 	:	'=';
Function 	:	'function';
Lbracket 	:	'[';
Rbracket 	:	']';
Lparen 		:	'(';
Rparen 		:	')';
Return 		:	'return';
Returns 	:	'returns';
Comma 		:	',';
Begin 		:	'begin';
End 		:	'end';
If 			:	'if';
Else 		:	'else';
Then 		:	'then';
For 		:	'for';
While 		:	'while';
Colon 		:	':';
Dotdotdot 	:	'...';
Step 		:	'step';
Foreach 	:	'foreach';
In 			:	'in';
Switch 		:	'switch';
CaseKeyword :	'case';
Break 		:	'break';