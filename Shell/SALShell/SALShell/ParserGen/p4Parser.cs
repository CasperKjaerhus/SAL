//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from p4.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class p4Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, Modifier=2, Number=3, Function=4, Returns=5, Return=6, Lparen=7, 
		Rparen=8, Semicolon=9, Assign=10, Comma=11, Include=12, Begin=13, End=14, 
		If=15, Else=16, Then=17, For=18, While=19, Colon=20, Dotdotdot=21, Step=22, 
		Foreach=23, In=24, Switch=25, CaseKeyword=26, Break=27, Dot=28, LogOrOp=29, 
		LogAndOp=30, EqualityOp=31, RelOp=32, AddOp=33, MultOp=34, Lbracket=35, 
		Rbracket=36, Lbrace=37, Rbrace=38, CompoundOp=39, IncrementOp=40, Negation=41, 
		NUMBER=42, STRING=43, CHAR=44, BOOL=45, VOID=46, True=47, False=48, Id=49, 
		Decimal=50, Integer=51, String=52, Char=53, LineComment=54, MultiComment=55, 
		WS=56;
	public const int
		RULE_s = 0, RULE_importStmt = 1, RULE_stmt = 2, RULE_block = 3, RULE_returnExpr = 4, 
		RULE_funcDcl = 5, RULE_params = 6, RULE_param = 7, RULE_functionBody = 8, 
		RULE_returnsStmt = 9, RULE_assignment = 10, RULE_declaration = 11, RULE_functioncall = 12, 
		RULE_arguments = 13, RULE_controlStructure = 14, RULE_ifStmt = 15, RULE_elseStmt = 16, 
		RULE_loopStructure = 17, RULE_forexpr = 18, RULE_whileexpr = 19, RULE_foreachexpr = 20, 
		RULE_switchStmt = 21, RULE_switchBody = 22, RULE_switchItem = 23, RULE_expr = 24, 
		RULE_condExpr = 25, RULE_logORexpr = 26, RULE_logANDexpr = 27, RULE_andExpr = 28, 
		RULE_relExpr = 29, RULE_addExpr = 30, RULE_multExpr = 31, RULE_exprList = 32, 
		RULE_postExpr = 33, RULE_primExpr = 34, RULE_literal = 35, RULE_postfix = 36, 
		RULE_prefix = 37, RULE_valuetype = 38, RULE_returntype = 39, RULE_value = 40, 
		RULE_bool = 41, RULE_assnOp = 42;
	public static readonly string[] ruleNames = {
		"s", "importStmt", "stmt", "block", "returnExpr", "funcDcl", "params", 
		"param", "functionBody", "returnsStmt", "assignment", "declaration", "functioncall", 
		"arguments", "controlStructure", "ifStmt", "elseStmt", "loopStructure", 
		"forexpr", "whileexpr", "foreachexpr", "switchStmt", "switchBody", "switchItem", 
		"expr", "condExpr", "logORexpr", "logANDexpr", "andExpr", "relExpr", "addExpr", 
		"multExpr", "exprList", "postExpr", "primExpr", "literal", "postfix", 
		"prefix", "valuetype", "returntype", "value", "bool", "assnOp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", null, null, "'function'", "'returns'", "'return'", "'('", 
		"')'", "';'", "'='", "','", "'include'", "'begin'", "'end'", "'if'", "'else'", 
		"'then'", "'for'", "'while'", "':'", "'...'", "'step'", "'foreach'", "'in'", 
		"'switch'", "'case'", "'break'", "'.'", "'||'", "'&&'", null, null, null, 
		null, "'['", "']'", "'{'", "'}'", null, null, "'!'", "'number'", "'string'", 
		"'char'", "'bool'", "'void'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "Modifier", "Number", "Function", "Returns", "Return", "Lparen", 
		"Rparen", "Semicolon", "Assign", "Comma", "Include", "Begin", "End", "If", 
		"Else", "Then", "For", "While", "Colon", "Dotdotdot", "Step", "Foreach", 
		"In", "Switch", "CaseKeyword", "Break", "Dot", "LogOrOp", "LogAndOp", 
		"EqualityOp", "RelOp", "AddOp", "MultOp", "Lbracket", "Rbracket", "Lbrace", 
		"Rbrace", "CompoundOp", "IncrementOp", "Negation", "NUMBER", "STRING", 
		"CHAR", "BOOL", "VOID", "True", "False", "Id", "Decimal", "Integer", "String", 
		"Char", "LineComment", "MultiComment", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "p4.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static p4Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public p4Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public p4Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext[] importStmt() {
			return GetRuleContexts<ImportStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext importStmt(int i) {
			return GetRuleContext<ImportStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext[] funcDcl() {
			return GetRuleContexts<FuncDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl(int i) {
			return GetRuleContext<FuncDclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 0, RULE_s);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Include) {
				{
				{
				State = 86;
				importStmt();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Function) {
				{
				{
				State = 92;
				funcDcl();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << If) | (1L << For) | (1L << While) | (1L << Foreach) | (1L << Switch) | (1L << IncrementOp) | (1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL) | (1L << Id))) != 0)) {
				{
				{
				State = 98;
				stmt();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(p4Parser.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		public ImportStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterImportStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitImportStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStmtContext importStmt() {
		ImportStmtContext _localctx = new ImportStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(Include);
			State = 105;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(p4Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixContext postfix() {
			return GetRuleContext<PostfixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixContext prefix() {
			return GetRuleContext<PrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(p4Parser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(p4Parser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(p4Parser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(p4Parser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureContext controlStructure() {
			return GetRuleContext<ControlStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStructureContext loopStructure() {
			return GetRuleContext<LoopStructureContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			int _alt;
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				assignment();
				State = 108;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				declaration();
				State = 111;
				Match(Semicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				postfix();
				State = 114;
				Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 116;
				prefix();
				State = 117;
				Match(Semicolon);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 123;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 119;
						Match(Id);
						State = 120;
						Match(Dot);
						}
						} 
					}
					State = 125;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				State = 126;
				functioncall();
				State = 127;
				Match(Semicolon);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 129;
				controlStructure();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 130;
				loopStructure();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(p4Parser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(p4Parser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(Begin);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << If) | (1L << For) | (1L << While) | (1L << Foreach) | (1L << Switch) | (1L << IncrementOp) | (1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL) | (1L << Id))) != 0)) {
				{
				{
				State = 134;
				stmt();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 140;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(p4Parser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(p4Parser.Semicolon, 0); }
		public ReturnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterReturnExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitReturnExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExprContext returnExpr() {
		ReturnExprContext _localctx = new ReturnExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(Return);
			State = 143;
			expr();
			State = 144;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(p4Parser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnsStmtContext returnsStmt() {
			return GetRuleContext<ReturnsStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(Function);
			State = 147;
			Match(Id);
			State = 148;
			Match(Lparen);
			State = 149;
			@params();
			State = 150;
			Match(Rparen);
			State = 151;
			returnsStmt();
			State = 152;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 12, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL))) != 0)) {
				{
				State = 154;
				param();
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 155;
					Match(Comma);
					State = 156;
					param();
					}
					}
					State = 161;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValuetypeContext valuetype() {
			return GetRuleContext<ValuetypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 14, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			valuetype();
			State = 165;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(p4Parser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(p4Parser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnExprContext returnExpr() {
			return GetRuleContext<ReturnExprContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(Begin);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << If) | (1L << For) | (1L << While) | (1L << Foreach) | (1L << Switch) | (1L << IncrementOp) | (1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL) | (1L << Id))) != 0)) {
				{
				{
				State = 168;
				stmt();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Return) {
				{
				State = 174;
				returnExpr();
				}
			}

			State = 177;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnsStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Returns() { return GetToken(p4Parser.Returns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturntypeContext returntype() {
			return GetRuleContext<ReturntypeContext>(0);
		}
		public ReturnsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnsStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterReturnsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitReturnsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnsStmtContext returnsStmt() {
		ReturnsStmtContext _localctx = new ReturnsStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(Returns);
			State = 180;
			returntype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssnOpContext assnOp() {
			return GetRuleContext<AssnOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(Id);
			State = 183;
			assnOp();
			State = 184;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValuetypeContext valuetype() {
			return GetRuleContext<ValuetypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modifier() { return GetToken(p4Parser.Modifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(p4Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			valuetype();
			State = 187;
			Match(Id);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Modifier) {
				{
				State = 188;
				Match(Modifier);
				}
			}

			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 191;
				Match(Assign);
				State = 192;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 24, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(Id);
			State = 196;
			Match(Lparen);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << Lparen) | (1L << Lbrace) | (1L << IncrementOp) | (1L << Negation) | (1L << True) | (1L << False) | (1L << Id) | (1L << String) | (1L << Char))) != 0)) {
				{
				State = 197;
				arguments();
				}
			}

			State = 200;
			Match(Rparen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 26, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			expr();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 203;
				Match(Comma);
				State = 204;
				expr();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		public ControlStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterControlStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitControlStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructureContext controlStructure() {
		ControlStructureContext _localctx = new ControlStructureContext(Context, State);
		EnterRule(_localctx, 28, RULE_controlStructure);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				ifStmt();
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				switchStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(p4Parser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(p4Parser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(If);
			State = 215;
			Match(Lparen);
			State = 216;
			expr();
			State = 217;
			Match(Rparen);
			State = 218;
			Match(Then);
			State = 219;
			block();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 220;
				elseStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(p4Parser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseStmt);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(Else);
				State = 224;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				Match(Else);
				State = 226;
				ifStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForexprContext forexpr() {
			return GetRuleContext<ForexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachexprContext foreachexpr() {
			return GetRuleContext<ForeachexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileexprContext whileexpr() {
			return GetRuleContext<WhileexprContext>(0);
		}
		public LoopStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLoopStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLoopStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStructureContext loopStructure() {
		LoopStructureContext _localctx = new LoopStructureContext(Context, State);
		EnterRule(_localctx, 34, RULE_loopStructure);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case For:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				forexpr();
				}
				break;
			case Foreach:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				foreachexpr();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				whileexpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(p4Parser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(p4Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dotdotdot() { return GetToken(p4Parser.Dotdotdot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(p4Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Step() { return GetToken(p4Parser.Step, 0); }
		public ForexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterForexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitForexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForexprContext forexpr() {
		ForexprContext _localctx = new ForexprContext(Context, State);
		EnterRule(_localctx, 36, RULE_forexpr);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				Match(For);
				State = 235;
				Match(Lparen);
				State = 236;
				Match(Id);
				State = 237;
				Match(Colon);
				State = 238;
				expr();
				State = 239;
				Match(Dotdotdot);
				State = 240;
				expr();
				State = 241;
				Match(Rparen);
				State = 242;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				Match(For);
				State = 245;
				Match(Lparen);
				State = 246;
				Match(Id);
				State = 247;
				Match(Colon);
				State = 248;
				expr();
				State = 249;
				Match(Dotdotdot);
				State = 250;
				expr();
				State = 251;
				Match(Comma);
				State = 252;
				Match(Step);
				State = 253;
				expr();
				State = 254;
				Match(Rparen);
				State = 255;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(p4Parser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterWhileexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitWhileexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileexprContext whileexpr() {
		WhileexprContext _localctx = new WhileexprContext(Context, State);
		EnterRule(_localctx, 38, RULE_whileexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(While);
			State = 260;
			Match(Lparen);
			State = 261;
			expr();
			State = 262;
			Match(Rparen);
			State = 263;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Foreach() { return GetToken(p4Parser.Foreach, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(p4Parser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(p4Parser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(p4Parser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForeachexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterForeachexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitForeachexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachexprContext foreachexpr() {
		ForeachexprContext _localctx = new ForeachexprContext(Context, State);
		EnterRule(_localctx, 40, RULE_foreachexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(Foreach);
			State = 266;
			Match(Lparen);
			State = 267;
			Match(Id);
			State = 268;
			Match(In);
			State = 269;
			Match(Id);
			State = 270;
			Match(Rparen);
			State = 271;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(p4Parser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBodyContext switchBody() {
			return GetRuleContext<SwitchBodyContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_switchStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(Switch);
			State = 274;
			Match(Lparen);
			State = 275;
			Match(Id);
			State = 276;
			Match(Rparen);
			State = 277;
			switchBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(p4Parser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(p4Parser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchItemContext[] switchItem() {
			return GetRuleContexts<SwitchItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchItemContext switchItem(int i) {
			return GetRuleContext<SwitchItemContext>(i);
		}
		public SwitchBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBodyContext switchBody() {
		SwitchBodyContext _localctx = new SwitchBodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_switchBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(Begin);
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CaseKeyword) {
				{
				{
				State = 280;
				switchItem();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 286;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CaseKeyword() { return GetToken(p4Parser.CaseKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(p4Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(p4Parser.Break, 0); }
		public SwitchItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterSwitchItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitSwitchItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchItemContext switchItem() {
		SwitchItemContext _localctx = new SwitchItemContext(Context, State);
		EnterRule(_localctx, 46, RULE_switchItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(CaseKeyword);
			State = 289;
			expr();
			State = 290;
			Match(Colon);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Begin) {
				{
				State = 291;
				block();
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Break) {
				{
				State = 294;
				Match(Break);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondExprContext condExpr() {
			return GetRuleContext<CondExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Negation() { return GetToken(p4Parser.Negation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Negation) {
				{
				State = 297;
				Match(Negation);
				}
			}

			State = 300;
			condExpr();
			State = 305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 301;
					Match(Comma);
					State = 302;
					expr();
					}
					} 
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogORexprContext logORexpr() {
			return GetRuleContext<LogORexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(p4Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondExprContext condExpr() {
			return GetRuleContext<CondExprContext>(0);
		}
		public CondExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondExprContext condExpr() {
		CondExprContext _localctx = new CondExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_condExpr);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308;
				logORexpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309;
				logORexpr(0);
				State = 310;
				Match(T__0);
				State = 311;
				expr();
				State = 312;
				Match(Colon);
				State = 313;
				condExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogORexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogANDexprContext logANDexpr() {
			return GetRuleContext<LogANDexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogORexprContext logORexpr() {
			return GetRuleContext<LogORexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogOrOp() { return GetToken(p4Parser.LogOrOp, 0); }
		public LogORexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logORexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLogORexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLogORexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogORexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogORexprContext logORexpr() {
		return logORexpr(0);
	}

	private LogORexprContext logORexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogORexprContext _localctx = new LogORexprContext(Context, _parentState);
		LogORexprContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_logORexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 318;
			logANDexpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogORexprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logORexpr);
					State = 320;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 321;
					Match(LogOrOp);
					State = 322;
					logANDexpr(0);
					}
					} 
				}
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogANDexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr() {
			return GetRuleContext<AndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogANDexprContext logANDexpr() {
			return GetRuleContext<LogANDexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogAndOp() { return GetToken(p4Parser.LogAndOp, 0); }
		public LogANDexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logANDexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLogANDexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLogANDexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogANDexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogANDexprContext logANDexpr() {
		return logANDexpr(0);
	}

	private LogANDexprContext logANDexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogANDexprContext _localctx = new LogANDexprContext(Context, _parentState);
		LogANDexprContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_logANDexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 329;
			andExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 336;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogANDexprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logANDexpr);
					State = 331;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 332;
					Match(LogAndOp);
					State = 333;
					andExpr(0);
					}
					} 
				}
				State = 338;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelExprContext relExpr() {
			return GetRuleContext<RelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr() {
			return GetRuleContext<AndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqualityOp() { return GetToken(p4Parser.EqualityOp, 0); }
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		return andExpr(0);
	}

	private AndExprContext andExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExprContext _localctx = new AndExprContext(Context, _parentState);
		AndExprContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_andExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 340;
			relExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 347;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpr);
					State = 342;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 343;
					Match(EqualityOp);
					State = 344;
					relExpr(0);
					}
					} 
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext addExpr() {
			return GetRuleContext<AddExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelExprContext relExpr() {
			return GetRuleContext<RelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RelOp() { return GetToken(p4Parser.RelOp, 0); }
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		return relExpr(0);
	}

	private RelExprContext relExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelExprContext _localctx = new RelExprContext(Context, _parentState);
		RelExprContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_relExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 351;
			addExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relExpr);
					State = 353;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 354;
					Match(RelOp);
					State = 355;
					addExpr(0);
					}
					} 
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExprContext multExpr() {
			return GetRuleContext<MultExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext addExpr() {
			return GetRuleContext<AddExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AddOp() { return GetToken(p4Parser.AddOp, 0); }
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		return addExpr(0);
	}

	private AddExprContext addExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AddExprContext _localctx = new AddExprContext(Context, _parentState);
		AddExprContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_addExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 362;
			multExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 369;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_addExpr);
					State = 364;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 365;
					Match(AddOp);
					State = 366;
					multExpr(0);
					}
					} 
				}
				State = 371;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostExprContext postExpr() {
			return GetRuleContext<PostExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExprContext multExpr() {
			return GetRuleContext<MultExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultOp() { return GetToken(p4Parser.MultOp, 0); }
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		return multExpr(0);
	}

	private MultExprContext multExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultExprContext _localctx = new MultExprContext(Context, _parentState);
		MultExprContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_multExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 373;
			postExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 380;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multExpr);
					State = 375;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 376;
					Match(MultOp);
					State = 377;
					postExpr(0);
					}
					} 
				}
				State = 382;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(p4Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(p4Parser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext[] exprList() {
			return GetRuleContexts<ExprListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList(int i) {
			return GetRuleContext<ExprListContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 64, RULE_exprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			expr();
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 384;
					Match(Comma);
					State = 385;
					exprList();
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimExprContext primExpr() {
			return GetRuleContext<PrimExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbrace() { return GetToken(p4Parser.Lbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbrace() { return GetToken(p4Parser.Rbrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostExprContext postExpr() {
			return GetRuleContext<PostExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lbracket() { return GetToken(p4Parser.Lbracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rbracket() { return GetToken(p4Parser.Rbracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(p4Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		public PostExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterPostExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitPostExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostExprContext postExpr() {
		return postExpr(0);
	}

	private PostExprContext postExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostExprContext _localctx = new PostExprContext(Context, _parentState);
		PostExprContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_postExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
			case Lparen:
			case IncrementOp:
			case True:
			case False:
			case Id:
			case String:
			case Char:
				{
				State = 392;
				primExpr();
				}
				break;
			case Lbrace:
				{
				State = 393;
				Match(Lbrace);
				State = 394;
				exprList();
				State = 395;
				Match(Rbrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 409;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 407;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						_localctx = new PostExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postExpr);
						State = 399;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 400;
						Match(Lbracket);
						State = 401;
						expr();
						State = 402;
						Match(Rbracket);
						}
						break;
					case 2:
						{
						_localctx = new PostExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postExpr);
						State = 404;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 405;
						Match(Dot);
						State = 406;
						Match(Id);
						}
						break;
					}
					} 
				}
				State = 411;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lparen() { return GetToken(p4Parser.Lparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rparen() { return GetToken(p4Parser.Rparen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostfixContext postfix() {
			return GetRuleContext<PostfixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixContext prefix() {
			return GetRuleContext<PrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public PrimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterPrimExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitPrimExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimExprContext primExpr() {
		PrimExprContext _localctx = new PrimExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_primExpr);
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 413;
				Match(Lparen);
				State = 414;
				expr();
				State = 415;
				Match(Rparen);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 417;
				Match(Id);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418;
				postfix();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 419;
				prefix();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 420;
				functioncall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 70, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncrementOp() { return GetToken(p4Parser.IncrementOp, 0); }
		public PostfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterPostfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitPostfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixContext postfix() {
		PostfixContext _localctx = new PostfixContext(Context, State);
		EnterRule(_localctx, 72, RULE_postfix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(Id);
			State = 426;
			Match(IncrementOp);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncrementOp() { return GetToken(p4Parser.IncrementOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(p4Parser.Id, 0); }
		public PrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixContext prefix() {
		PrefixContext _localctx = new PrefixContext(Context, State);
		EnterRule(_localctx, 74, RULE_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(IncrementOp);
			State = 429;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuetypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(p4Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(p4Parser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(p4Parser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(p4Parser.STRING, 0); }
		public ValuetypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuetype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterValuetype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitValuetype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuetype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuetypeContext valuetype() {
		ValuetypeContext _localctx = new ValuetypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_valuetype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << CHAR) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturntypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(p4Parser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuetypeContext valuetype() {
			return GetRuleContext<ValuetypeContext>(0);
		}
		public ReturntypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returntype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterReturntype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitReturntype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturntype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturntypeContext returntype() {
		ReturntypeContext _localctx = new ReturntypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_returntype);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433;
				Match(VOID);
				}
				break;
			case NUMBER:
			case STRING:
			case CHAR:
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434;
				valuetype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(p4Parser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(p4Parser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(p4Parser.String, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 80, RULE_value);
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437;
				Match(Number);
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438;
				@bool();
				}
				break;
			case Char:
				EnterOuterAlt(_localctx, 3);
				{
				State = 439;
				Match(Char);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 4);
				{
				State = 440;
				Match(String);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(p4Parser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(p4Parser.False, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 82, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssnOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(p4Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CompoundOp() { return GetToken(p4Parser.CompoundOp, 0); }
		public AssnOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assnOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.EnterAssnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ip4Listener typedListener = listener as Ip4Listener;
			if (typedListener != null) typedListener.ExitAssnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ip4Visitor<TResult> typedVisitor = visitor as Ip4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssnOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssnOpContext assnOp() {
		AssnOpContext _localctx = new AssnOpContext(Context, State);
		EnterRule(_localctx, 84, RULE_assnOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			_la = TokenStream.LA(1);
			if ( !(_la==Assign || _la==CompoundOp) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return logORexpr_sempred((LogORexprContext)_localctx, predIndex);
		case 27: return logANDexpr_sempred((LogANDexprContext)_localctx, predIndex);
		case 28: return andExpr_sempred((AndExprContext)_localctx, predIndex);
		case 29: return relExpr_sempred((RelExprContext)_localctx, predIndex);
		case 30: return addExpr_sempred((AddExprContext)_localctx, predIndex);
		case 31: return multExpr_sempred((MultExprContext)_localctx, predIndex);
		case 33: return postExpr_sempred((PostExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logORexpr_sempred(LogORexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logANDexpr_sempred(LogANDexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool andExpr_sempred(AndExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool relExpr_sempred(RelExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool addExpr_sempred(AddExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multExpr_sempred(MultExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool postExpr_sempred(PostExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ':', '\x1C2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x3', '\x2', '\a', '\x2', 'Z', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', ']', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '`', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x63', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\x66', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'i', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '|', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x7F', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x86', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x8A', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x8D', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xA0', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\xA3', '\v', '\b', '\x5', '\b', '\xA5', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '\xAC', '\n', '\n', '\f', '\n', '\xE', '\n', '\xAF', '\v', 
		'\n', '\x3', '\n', '\x5', '\n', '\xB2', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\xC0', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xC4', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xC9', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xD0', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xD3', 
		'\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xD7', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xE0', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xE6', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\xEB', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x104', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\a', 
		'\x18', '\x11C', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x11F', '\v', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x127', '\n', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x12A', '\n', '\x19', '\x3', '\x1A', '\x5', '\x1A', '\x12D', 
		'\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x132', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x135', '\v', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x13E', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\x146', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\x149', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x151', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\x154', '\v', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', 
		'\x1E', '\x15C', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x15F', '\v', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\a', '\x1F', '\x167', '\n', '\x1F', '\f', '\x1F', 
		'\xE', '\x1F', '\x16A', '\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x172', '\n', ' ', '\f', 
		' ', '\xE', ' ', '\x175', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x17D', '\n', '!', '\f', 
		'!', '\xE', '!', '\x180', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\a', '\"', '\x185', '\n', '\"', '\f', '\"', '\xE', '\"', '\x188', 
		'\v', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x190', '\n', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', 
		'#', '\x19A', '\n', '#', '\f', '#', '\xE', '#', '\x19D', '\v', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1A8', '\n', '$', '\x3', '%', 
		'\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x5', ')', 
		'\x1B6', '\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', 
		'*', '\x1BC', '\n', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x2', '\t', '\x36', '\x38', ':', '<', '>', '@', '\x44', '-', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', '\x2', 
		'\x5', '\x3', '\x2', ',', '/', '\x3', '\x2', '\x31', '\x32', '\x4', '\x2', 
		'\f', '\f', ')', ')', '\x2', '\x1C8', '\x2', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'j', '\x3', '\x2', '\x2', '\x2', '\x6', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x87', '\x3', '\x2', '\x2', '\x2', '\n', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xBC', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xD8', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '$', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x103', '\x3', '\x2', '\x2', '\x2', '(', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x10B', '\x3', '\x2', '\x2', '\x2', ',', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x122', '\x3', '\x2', '\x2', '\x2', '\x32', '\x12C', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x36', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		':', '\x155', '\x3', '\x2', '\x2', '\x2', '<', '\x160', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x16B', '\x3', '\x2', '\x2', '\x2', '@', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1A9', '\x3', '\x2', '\x2', '\x2', 'J', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1B1', '\x3', '\x2', '\x2', '\x2', 'P', '\x1B5', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1BB', '\x3', '\x2', '\x2', '\x2', 'T', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Z', '\x5', '\x4', '\x3', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x61', '\x3', '\x2', '\x2', 
		'\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x5', '\f', '\a', 
		'\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x62', 'g', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x5', '\x6', '\x4', 
		'\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x3', '\x3', '\x2', '\x2', '\x2', 'i', 
		'g', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\xE', '\x2', '\x2', 
		'k', 'l', '\a', '\x33', '\x2', '\x2', 'l', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x5', '\x16', '\f', '\x2', 'n', 'o', '\a', '\v', '\x2', 
		'\x2', 'o', '\x86', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x5', '\x18', 
		'\r', '\x2', 'q', 'r', '\a', '\v', '\x2', '\x2', 'r', '\x86', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\x5', 'J', '&', '\x2', 't', 'u', '\a', '\v', 
		'\x2', '\x2', 'u', '\x86', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', 
		'L', '\'', '\x2', 'w', 'x', '\a', '\v', '\x2', '\x2', 'x', '\x86', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\a', '\x33', '\x2', '\x2', 'z', '|', '\a', 
		'\x1E', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', 
		'~', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x5', '\x1A', 
		'\xE', '\x2', '\x81', '\x82', '\a', '\v', '\x2', '\x2', '\x82', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x5', '\x1E', '\x10', '\x2', 
		'\x84', '\x86', '\x5', '$', '\x13', '\x2', '\x85', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x85', 'p', '\x3', '\x2', '\x2', '\x2', '\x85', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x85', 'v', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x8B', '\a', '\xF', '\x2', '\x2', '\x88', 
		'\x8A', '\x5', '\x6', '\x4', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\a', '\x10', '\x2', '\x2', '\x8F', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\b', '\x2', '\x2', '\x91', 
		'\x92', '\x5', '\x32', '\x1A', '\x2', '\x92', '\x93', '\a', '\v', '\x2', 
		'\x2', '\x93', '\v', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\x6', '\x2', '\x2', '\x95', '\x96', '\a', '\x33', '\x2', '\x2', '\x96', 
		'\x97', '\a', '\t', '\x2', '\x2', '\x97', '\x98', '\x5', '\xE', '\b', 
		'\x2', '\x98', '\x99', '\a', '\n', '\x2', '\x2', '\x99', '\x9A', '\x5', 
		'\x14', '\v', '\x2', '\x9A', '\x9B', '\x5', '\x12', '\n', '\x2', '\x9B', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA1', '\x5', '\x10', '\t', 
		'\x2', '\x9D', '\x9E', '\a', '\r', '\x2', '\x2', '\x9E', '\xA0', '\x5', 
		'\x10', '\t', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x5', 
		'N', '(', '\x2', '\xA7', '\xA8', '\a', '\x33', '\x2', '\x2', '\xA8', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAD', '\a', '\xF', '\x2', '\x2', 
		'\xAA', '\xAC', '\x5', '\x6', '\x4', '\x2', '\xAB', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB2', '\x5', '\n', '\x6', '\x2', '\xB1', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x10', 
		'\x2', '\x2', '\xB4', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
		'\a', '\a', '\x2', '\x2', '\xB6', '\xB7', '\x5', 'P', ')', '\x2', '\xB7', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x33', '\x2', 
		'\x2', '\xB9', '\xBA', '\x5', 'V', ',', '\x2', '\xBA', '\xBB', '\x5', 
		'\x32', '\x1A', '\x2', '\xBB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\x5', 'N', '(', '\x2', '\xBD', '\xBF', '\a', '\x33', '\x2', '\x2', 
		'\xBE', '\xC0', '\a', '\x4', '\x2', '\x2', '\xBF', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\f', '\x2', '\x2', 
		'\xC2', '\xC4', '\x5', '\x32', '\x1A', '\x2', '\xC3', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x33', '\x2', '\x2', 
		'\xC6', '\xC8', '\a', '\t', '\x2', '\x2', '\xC7', '\xC9', '\x5', '\x1C', 
		'\xF', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCB', '\a', '\n', '\x2', '\x2', '\xCB', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xD1', '\x5', '\x32', '\x1A', '\x2', '\xCD', '\xCE', 
		'\a', '\r', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\x32', '\x1A', '\x2', 
		'\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x5', ' ', 
		'\x11', '\x2', '\xD5', '\xD7', '\x5', ',', '\x17', '\x2', '\xD6', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\x11', 
		'\x2', '\x2', '\xD9', '\xDA', '\a', '\t', '\x2', '\x2', '\xDA', '\xDB', 
		'\x5', '\x32', '\x1A', '\x2', '\xDB', '\xDC', '\a', '\n', '\x2', '\x2', 
		'\xDC', '\xDD', '\a', '\x13', '\x2', '\x2', '\xDD', '\xDF', '\x5', '\b', 
		'\x5', '\x2', '\xDE', '\xE0', '\x5', '\"', '\x12', '\x2', '\xDF', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '!', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x12', 
		'\x2', '\x2', '\xE2', '\xE6', '\x5', '\b', '\x5', '\x2', '\xE3', '\xE4', 
		'\a', '\x12', '\x2', '\x2', '\xE4', '\xE6', '\x5', ' ', '\x11', '\x2', 
		'\xE5', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '#', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEB', 
		'\x5', '&', '\x14', '\x2', '\xE8', '\xEB', '\x5', '*', '\x16', '\x2', 
		'\xE9', '\xEB', '\x5', '(', '\x15', '\x2', '\xEA', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '%', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '\x14', '\x2', '\x2', '\xED', '\xEE', '\a', '\t', '\x2', 
		'\x2', '\xEE', '\xEF', '\a', '\x33', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'\x16', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\x32', '\x1A', '\x2', '\xF1', 
		'\xF2', '\a', '\x17', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x32', '\x1A', 
		'\x2', '\xF3', '\xF4', '\a', '\n', '\x2', '\x2', '\xF4', '\xF5', '\x5', 
		'\b', '\x5', '\x2', '\xF5', '\x104', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF7', '\a', '\x14', '\x2', '\x2', '\xF7', '\xF8', '\a', '\t', '\x2', 
		'\x2', '\xF8', '\xF9', '\a', '\x33', '\x2', '\x2', '\xF9', '\xFA', '\a', 
		'\x16', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\x32', '\x1A', '\x2', '\xFB', 
		'\xFC', '\a', '\x17', '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x32', '\x1A', 
		'\x2', '\xFD', '\xFE', '\a', '\r', '\x2', '\x2', '\xFE', '\xFF', '\a', 
		'\x18', '\x2', '\x2', '\xFF', '\x100', '\x5', '\x32', '\x1A', '\x2', '\x100', 
		'\x101', '\a', '\n', '\x2', '\x2', '\x101', '\x102', '\x5', '\b', '\x5', 
		'\x2', '\x102', '\x104', '\x3', '\x2', '\x2', '\x2', '\x103', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\'', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\a', '\x15', 
		'\x2', '\x2', '\x106', '\x107', '\a', '\t', '\x2', '\x2', '\x107', '\x108', 
		'\x5', '\x32', '\x1A', '\x2', '\x108', '\x109', '\a', '\n', '\x2', '\x2', 
		'\x109', '\x10A', '\x5', '\b', '\x5', '\x2', '\x10A', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x10B', '\x10C', '\a', '\x19', '\x2', '\x2', '\x10C', '\x10D', 
		'\a', '\t', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x33', '\x2', '\x2', 
		'\x10E', '\x10F', '\a', '\x1A', '\x2', '\x2', '\x10F', '\x110', '\a', 
		'\x33', '\x2', '\x2', '\x110', '\x111', '\a', '\n', '\x2', '\x2', '\x111', 
		'\x112', '\x5', '\b', '\x5', '\x2', '\x112', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\a', '\x1B', '\x2', '\x2', '\x114', '\x115', 
		'\a', '\t', '\x2', '\x2', '\x115', '\x116', '\a', '\x33', '\x2', '\x2', 
		'\x116', '\x117', '\a', '\n', '\x2', '\x2', '\x117', '\x118', '\x5', '.', 
		'\x18', '\x2', '\x118', '-', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11D', 
		'\a', '\xF', '\x2', '\x2', '\x11A', '\x11C', '\x5', '\x30', '\x19', '\x2', 
		'\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', 
		'\a', '\x10', '\x2', '\x2', '\x121', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x123', '\a', '\x1C', '\x2', '\x2', '\x123', '\x124', '\x5', 
		'\x32', '\x1A', '\x2', '\x124', '\x126', '\a', '\x16', '\x2', '\x2', '\x125', 
		'\x127', '\x5', '\b', '\x5', '\x2', '\x126', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', '\a', '\x1D', '\x2', '\x2', 
		'\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x31', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12D', '\a', '+', '\x2', '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x133', '\x5', '\x34', '\x1B', '\x2', 
		'\x12F', '\x130', '\a', '\r', '\x2', '\x2', '\x130', '\x132', '\x5', '\x32', 
		'\x1A', '\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x13E', '\x5', '\x36', '\x1C', '\x2', '\x137', '\x138', '\x5', 
		'\x36', '\x1C', '\x2', '\x138', '\x139', '\a', '\x3', '\x2', '\x2', '\x139', 
		'\x13A', '\x5', '\x32', '\x1A', '\x2', '\x13A', '\x13B', '\a', '\x16', 
		'\x2', '\x2', '\x13B', '\x13C', '\x5', '\x34', '\x1B', '\x2', '\x13C', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\b', '\x1C', '\x1', '\x2', 
		'\x140', '\x141', '\x5', '\x38', '\x1D', '\x2', '\x141', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\f', '\x4', '\x2', '\x2', '\x143', 
		'\x144', '\a', '\x1F', '\x2', '\x2', '\x144', '\x146', '\x5', '\x38', 
		'\x1D', '\x2', '\x145', '\x142', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14B', '\b', '\x1D', '\x1', '\x2', '\x14B', '\x14C', '\x5', 
		':', '\x1E', '\x2', '\x14C', '\x152', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\f', '\x4', '\x2', '\x2', '\x14E', '\x14F', '\a', ' ', '\x2', 
		'\x2', '\x14F', '\x151', '\x5', ':', '\x1E', '\x2', '\x150', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x39', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\b', '\x1E', '\x1', 
		'\x2', '\x156', '\x157', '\x5', '<', '\x1F', '\x2', '\x157', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\f', '\x4', '\x2', '\x2', 
		'\x159', '\x15A', '\a', '!', '\x2', '\x2', '\x15A', '\x15C', '\x5', '<', 
		'\x1F', '\x2', '\x15B', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\b', '\x1F', '\x1', '\x2', '\x161', '\x162', '\x5', '>', ' ', 
		'\x2', '\x162', '\x168', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', 
		'\f', '\x4', '\x2', '\x2', '\x164', '\x165', '\a', '\"', '\x2', '\x2', 
		'\x165', '\x167', '\x5', '>', ' ', '\x2', '\x166', '\x163', '\x3', '\x2', 
		'\x2', '\x2', '\x167', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x168', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x169', '=', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x168', '\x3', '\x2', 
		'\x2', '\x2', '\x16B', '\x16C', '\b', ' ', '\x1', '\x2', '\x16C', '\x16D', 
		'\x5', '@', '!', '\x2', '\x16D', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x16F', '\f', '\x4', '\x2', '\x2', '\x16F', '\x170', '\a', '#', 
		'\x2', '\x2', '\x170', '\x172', '\x5', '@', '!', '\x2', '\x171', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '?', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\b', '!', '\x1', 
		'\x2', '\x177', '\x178', '\x5', '\x44', '#', '\x2', '\x178', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\f', '\x4', '\x2', '\x2', 
		'\x17A', '\x17B', '\a', '$', '\x2', '\x2', '\x17B', '\x17D', '\x5', '\x44', 
		'#', '\x2', '\x17C', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17E', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x186', '\x5', '\x32', '\x1A', '\x2', '\x182', '\x183', '\a', '\r', '\x2', 
		'\x2', '\x183', '\x185', '\x5', '\x42', '\"', '\x2', '\x184', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x43', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\b', '#', '\x1', 
		'\x2', '\x18A', '\x190', '\x5', '\x46', '$', '\x2', '\x18B', '\x18C', 
		'\a', '\'', '\x2', '\x2', '\x18C', '\x18D', '\x5', '\x42', '\"', '\x2', 
		'\x18D', '\x18E', '\a', '(', '\x2', '\x2', '\x18E', '\x190', '\x3', '\x2', 
		'\x2', '\x2', '\x18F', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x192', '\f', '\x4', '\x2', '\x2', '\x192', '\x193', '\a', '%', 
		'\x2', '\x2', '\x193', '\x194', '\x5', '\x32', '\x1A', '\x2', '\x194', 
		'\x195', '\a', '&', '\x2', '\x2', '\x195', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x197', '\f', '\x3', '\x2', '\x2', '\x197', '\x198', 
		'\a', '\x1E', '\x2', '\x2', '\x198', '\x19A', '\a', '\x33', '\x2', '\x2', 
		'\x199', '\x191', '\x3', '\x2', '\x2', '\x2', '\x199', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x45', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A8', '\x5', 'H', '%', '\x2', 
		'\x19F', '\x1A0', '\a', '\t', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '\x32', 
		'\x1A', '\x2', '\x1A1', '\x1A2', '\a', '\n', '\x2', '\x2', '\x1A2', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A8', '\a', '\x33', '\x2', '\x2', 
		'\x1A4', '\x1A8', '\x5', 'J', '&', '\x2', '\x1A5', '\x1A8', '\x5', 'L', 
		'\'', '\x2', '\x1A6', '\x1A8', '\x5', '\x1A', '\xE', '\x2', '\x1A7', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A7', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A8', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x1A9', '\x1AA', '\x5', 'R', '*', '\x2', '\x1AA', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\a', '\x33', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\a', '*', '\x2', '\x2', '\x1AD', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\a', '*', '\x2', '\x2', '\x1AF', '\x1B0', '\a', '\x33', 
		'\x2', '\x2', '\x1B0', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\t', '\x2', '\x2', '\x2', '\x1B2', 'O', '\x3', '\x2', '\x2', '\x2', '\x1B3', 
		'\x1B6', '\a', '\x30', '\x2', '\x2', '\x1B4', '\x1B6', '\x5', 'N', '(', 
		'\x2', '\x1B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x1B7', '\x1BC', '\a', '\x5', '\x2', '\x2', '\x1B8', '\x1BC', '\x5', 
		'T', '+', '\x2', '\x1B9', '\x1BC', '\a', '\x37', '\x2', '\x2', '\x1BA', 
		'\x1BC', '\a', '\x36', '\x2', '\x2', '\x1BB', '\x1B7', '\x3', '\x2', '\x2', 
		'\x2', '\x1BB', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', 'S', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\t', '\x3', 
		'\x2', '\x2', '\x1BE', 'U', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', 
		'\t', '\x4', '\x2', '\x2', '\x1C0', 'W', '\x3', '\x2', '\x2', '\x2', '(', 
		'[', '\x61', 'g', '}', '\x85', '\x8B', '\xA1', '\xA4', '\xAD', '\xB1', 
		'\xBF', '\xC3', '\xC8', '\xD1', '\xD6', '\xDF', '\xE5', '\xEA', '\x103', 
		'\x11D', '\x126', '\x129', '\x12C', '\x133', '\x13D', '\x147', '\x152', 
		'\x15D', '\x168', '\x173', '\x17E', '\x186', '\x18F', '\x199', '\x19B', 
		'\x1A7', '\x1B5', '\x1BB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
